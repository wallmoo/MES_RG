<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.passcombine.set.dao.SYFileDAO">
	
	<select id="selectFileKey" resultType="String">
SELECT fn_common_seq('file_group') AS file_group
	</select>
	
	<select id="selectRepairFileKey" resultType="String">
		SELECT fn_common_seq('repair_file_group') AS file_group 
	</select>
	
	<select id="selectFile_nopage" parameterType="SYFileVo" resultType="SYFileVo">
		SELECT file_group, file_no, file_repo, file_cate, file_path, file_name
		  , file_ext, ifnull(file_size, 0) as file_size, file_del_yn, file_thumnail
		  , date_created, date_format(a.date_updated, '%Y.%m.%d') as date_updated 
			, creator, updater
		<!-- 	, fn_member_nm(updater) as updater_nm  -->
		FROM sy_file_info a
		WHERE 1=1
		<if test="file_group != null and !''.equals(file_group) ">
			AND file_group = #{file_group}
		</if>
		<if test="file_no != null and !''.equals(file_no) ">
			AND file_no = #{file_no}
		</if>
		<if test="file_name != null and !''.equals(file_name) ">
			AND SUBSTRING_INDEX(file_name, '.', 1) = SUBSTRING_INDEX(#{file_name}, '.', 1)
	<!-- 		AND file_name LIKE concat('%', #{file_name}, '%') -->
		</if>
		<if test="file_cate != null and !''.equals(file_cate) ">
			AND file_cate = #{file_cate}
		</if>
		<if test="file_ext != null and !''.equals(file_ext) ">
			AND file_ext = #{file_ext}
		</if>
		<if test="file_del_yn != null and !''.equals(file_del_yn) ">
			AND file_del_yn = #{file_del_yn}
		</if>
		<if test="matnr != null and !''.equals(matnr) ">
			AND SUBSTRING_INDEX(file_name, '.', 1) = (select SUBSTRING_INDEX(file_name, '.', 1) from sy_file_work_std where matnr = #{matnr} and file_del_yn = 'N')
		</if>
		ORDER BY file_no
	</select>
	
	<select id="selectFile" parameterType="SYFileVo" resultType="SYFileVo">
		SELECT
			file_group,
			file_no,
			sfi.file_class_code,
			fn_code_file_nm ( sfi.file_class_code, 'class') as file_class,
			sfi.file_type_code,
			fn_code_file_nm ( sfi.file_type_code, 'type') as file_type,  
			sfi.creator_nm,
			sfi.file_rev_no,
			sfi.file_comment,
			sfi.file_name,
			sfi.file_path,
			sfi.input_rev_no,
			sfi.input_file_name,
			DATE_FORMAT(sfi.input_date, '%Y-%m-%d') input_date
		FROM 
			sy_file_info sfi
		<where>
			<if test="file_class_code != null and '' != file_class_code">
				AND sfi.file_class_code = #{file_class_code}
			</if>
			<if test="file_type_code != null and '' != file_type_code">
				AND sfi.file_type_code = #{file_type_code}
			</if>
			<if test="input_file_name != null and '' != input_file_name">
				AND <!-- sfi.file_name LIKE CONCAT('%', #{file_name}, '%') -->
					sfi.file_group IN (
						SELECT file_group FROM sy_file_info
						WHERE input_file_name LIKE CONCAT('%', #{input_file_name}, '%')
						AND file_final_yn = 'Y'
					)
			</if>
			<if test="creator_nm != null and '' != creator_nm">
				AND  sfi.creator_nm LIKE CONCAT('%',#{creator_nm}, '%')
			</if>
			<if test="file_rev_no != null and '' != file_rev_no ">
				AND sfi.file_rev_no = #{file_rev_no}
			</if>
			<if test="file_final_yn != null and file_final_yn == 'Y'.toString()">
				AND file_final_yn = 'Y' 
			</if>
			AND file_del_yn = 'N'
		</where>
		ORDER BY date_created DESC
		<if test="page != 0">
			LIMIT #{page}, #{rows}
		</if>
	</select>
	
	<select id="selectFile_count" parameterType="SYFileVo" resultType="int">
		SELECT count(*)
		FROM sy_file_info a
		WHERE 1=1
		<if test="file_group != null and !''.equals(file_group) ">
			AND file_group = #{file_group}
		</if>
		<if test="file_no != null and !''.equals(file_no) ">
			AND file_no = #{file_no}
		</if>
		<if test="file_name != null and !''.equals(file_name) ">
			AND SUBSTRING_INDEX(file_name, '.', 1) = SUBSTRING_INDEX(#{file_name}, '.', 1)
		</if>
		<if test="file_cate != null and !''.equals(file_cate) ">
			AND file_cate = #{file_cate}
		</if>
		<if test="file_ext != null and !''.equals(file_ext) ">
			AND file_ext = #{file_ext}
		</if>
		<if test="file_del_yn != null and !''.equals(file_del_yn) ">
			AND file_del_yn = #{file_del_yn}
		</if>
<!-- 			ORDER BY file_no -->
	</select>
	
	<select id="selectFileDetail" parameterType="SYFileVo" resultType="SYFileVo">
SELECT file_group, file_no, file_repo, file_cate, file_path, file_name
  , file_ext, ifnull(file_size, 0) as file_size, file_del_yn, file_thumnail
  , date_created, date_format(a.date_updated, '%Y.%m.%d') as date_updated 
	, creator, updater
<!-- 	, fn_member_nm(updater) as updater_nm -->
FROM sy_file_info a
WHERE 1=1
	<if test="file_group != null and !''.equals(file_group) ">
		AND file_group = #{file_group}
	</if>
	<if test="file_no != null and !''.equals(file_no) ">
		AND file_no = #{file_no}
	</if>
	<if test="file_name != null and !''.equals(file_name) ">
		AND file_name LIKE concat('%', #{file_name}, '%')
	</if>
	<if test="file_cate != null and !''.equals(file_cate) ">
		AND file_cate = #{file_cate}
	</if>
	<if test="file_ext != null and !''.equals(file_ext) ">
		AND file_ext = #{file_ext}
	</if>
	<if test="file_del_yn != null and !''.equals(file_del_yn) ">
		AND file_del_yn = #{file_del_yn}
	</if>
LIMIT 0, 1
	</select>
	
	<insert id="insertFile" parameterType="SYFileVo">
INSERT INTO sy_file_info (
  file_group, file_no, file_repo, file_cate, file_path, file_name
  , file_ext, file_size, file_del_yn, file_thumnail
  , date_created, date_updated, creator, updater
) VALUES (
	#{file_group}
	, CASE
			WHEN ifnull(#{file_group}, '') = ''  THEN 1 
			ELSE ifnull((SELECT MAX(file_no)+1 FROM sy_file_info x WHERE x.file_group = #{file_group}), 1) 
		END
	, #{file_repo}, #{file_cate}, #{file_path}, #{file_name}
  , #{file_ext}, ifnull(#{file_size}, 0), ifnull(#{file_del_yn}, 'N'), #{file_thumnail}
	, current_timestamp(), current_timestamp(), #{creator}, #{updater}
)
	</insert>
	
	<delete id="deleteFile" parameterType="SYFileVo">
		UPDATE sy_file_info
		SET file_del_yn = #{file_del_yn}
			, date_updated = current_timestamp()
			, updater = #{updater}
		WHERE file_group = #{file_group}
		<if test="file_no != null and !''.equals(file_no) ">
			AND file_no = #{file_no}
		</if>
	</delete>
	
	<delete id="delFlagFile" parameterType="SYFileVo">
		UPDATE sy_file_info
		SET file_del_yn = 'Y'
			, date_updated = current_timestamp()
			, updater = #{updater}
		WHERE file_cate = #{file_cate}
		<if test="file_name != null and !''.equals(file_name) ">
			AND file_name LIKE concat('%', SUBSTRING_INDEX(#{file_name}, '.', 1), '%')
		</if>
		<if test="file_del_yn != null and !''.equals(file_del_yn) ">
			AND file_del_yn = #{file_del_yn}
		</if>
	</delete>
	
	<!--  jyp   -->
	
	<select id="selectFileClass_cnt" parameterType="SYFileVo" resultType="Integer">
		SELECT
			COUNT(*)
		FROM
			set_fileclass_master
		<where>
			<if test="file_class_code != null and '' != file_class_code">
				AND file_class_code = #{file_class_code}
			</if>
			<if test="file_class_nm != null and '' != file_class_nm">
				AND file_class_nm = #{file_class_nm}
			</if>
		</where>
	</select>
	
	<select id="selectFileClass" parameterType="SYFileVo" resultType="SYFileVo">
		SELECT
			file_class_code,
			file_class_nm
		FROM
			set_fileclass_master
		<where>
			<if test="file_class_code != null and '' != file_class_code">
				AND file_class_code = #{file_class_code}
			</if>
			<if test="file_class_nm != null and '' != file_class_nm">
				AND file_class_nm = #{file_class_nm}
			</if>
			<if test="del_yn != null and '' != del_yn">
				AND del_yn = #{del_yn}
			</if>
		</where>
		
		<if test="page != 0">
			LIMIT #{page}, #{rows}
		</if>
	</select>
	
	<insert id="insFileClass" parameterType="SYFileVo">
		INSERT INTO set_fileclass_master
		(file_class_code, file_class_nm, creator, updater, date_created, date_updated)
		VALUES(
			fn_fileclass_code(),
			#{file_class_nm},
			#{creator}, #{updater},NOW(), NOW()
		)
	</insert>
	
	<update id="updFileClass" parameterType="SYFileVo">
		UPDATE set_fileclass_master
		SET
			<if test="file_class_nm != null and '' != file_class_nm">
				file_class_nm = #{file_class_nm},
			</if>
			
			<if test="del_yn != null and '' != del_yn">
				del_yn = #{del_yn},
			</if>
			updater = #{updater}, date_updated = NOW()
		WHERE
			file_class_code = #{file_class_code}
	</update>
	
	<update id="delFileClass" parameterType="Map">
		UPDATE set_fileclass_master
		SET
			del_yn = 'Y',
			updater = #{updater}, date_updated = NOW()
		WHERE
			<foreach collection="param" item="fileClass" open="file_class_code IN (" separator=" , " close=")">
				#{fileClass.file_class_code}
			</foreach>	
	</update>
	
	<select id="selectFileType" parameterType="SYFileVo" resultType="SYFileVo">
		SELECT
			file_class_code,
			file_type_code,
			file_type_nm
		FROM
			set_filetype_master
		<where>
			<if test="file_class_code != null and '' != file_class_code">
				AND file_class_code = #{file_class_code}
			</if>
			<if test="del_yn != null and '' != del_yn">
				AND del_yn = #{del_yn}
			</if>
			
		</where>
	</select>
	
	<insert id="insFileType" parameterType="SYFileVo">
		INSERT INTO set_filetype_master
		(file_class_code, file_type_code, file_type_nm, creator, date_created, updater, date_updated)
		VALUES(
			#{file_class_code},
			fn_filetype_code(),
			#{file_type_nm},
			#{creator}, NOW(), #{updater}, NOW()
		)
	</insert>
	
	<update id="updFileType" parameterType="SYFileVo">
		UPDATE set_filetype_master
		SET 
			file_type_nm = #{file_type_nm},
			updater = #{updater}, date_updated = NOW()
		WHERE
			file_class_code = #{file_class_code} and
			file_type_code = #{file_type_code}
	</update>
	
	<delete id="delFileType" parameterType="Map">
		UPDATE set_filetype_master
		SET
			del_yn = 'Y', updater = #{updater}, date_updated = NOW()
		WHERE 
			<foreach collection="param" item="fileType" open="file_type_code IN (" separator=" , " close=")">
				#{fileType.file_type_code}
			</foreach>	
	</delete>
	
	<insert id="insFileInfo" parameterType="SYFileVo">
		INSERT INTO sy_file_info
		(file_group, file_no, file_class_code, file_type_code
			, file_rev_no, input_rev_no, file_path, file_name, input_file_name, file_ext, file_size, file_comment,input_date, creator_nm, 
			creator, updater, date_created, date_updated)
		VALUES(
			#{file_group},
			1,
			#{file_class_code},
			#{file_type_code},
			#{file_rev_no},
			#{input_rev_no},
			#{file_path},
			#{file_name},
			#{input_file_name},
			#{file_ext},
			${file_size},
			#{file_comment},
			<if test="input_date != null and '' != input_date">
				#{input_date},
			</if>
			<if test="input_date == null or '' == input_date">
				NOW(),
			</if>
			#{creator_nm},
			#{creator}, #{updater}, NOW(), NOW()
		)
	</insert>
	
	<insert id="insNewFileInfo" parameterType="SYFileVo">
		INSERT INTO sy_file_info
		(file_group, file_no, file_class_code, file_type_code
			, file_rev_no, input_rev_no, file_path, input_file_name, file_name, file_ext, file_size, file_comment, input_date, creator_nm,
			creator, updater, date_created, date_updated)
		VALUES(
			#{file_group},
			${file_no} + 1,
			#{file_class_code},
			#{file_type_code},
			#{file_new_rev_no},
			#{input_rev_no},
			#{file_path},
			#{input_file_name},
			#{file_name},
			#{file_ext},
			${file_size},
			#{file_new_comment},
			<if test="input_new_date != null and '' != input_new_date">
				#{input_new_date},
			</if>
			<if test="input_new_date == null and '' == input_new_date">
				NOW(),
			</if>
			
			#{creator_nm},
			#{creator}, #{updater}, NOW(), NOW()
		)
	</insert>
	
	<update id="updFileInfo" parameterType="SYFileVo">
		UPDATE sy_file_info
		SET
			<if test="business_code != null and '' != business_code">
				business_code = #{business_code},
			</if>
			<if test="file_class_code != null and '' != file_class_code">
				file_class_code = #{file_class_code},
			</if>
			<if test="file_type_code != null and '' != file_type_code">
				file_type_code = #{file_type_code},
			</if>
			<if test="file_rev_no != null and '' != file_rev_no">
				file_rev_no = #{file_rev_no},
			</if>
			<if test="file_comment != null and '' != file_comment">
				file_comment = #{file_comment},
			</if>
			<if test="file_final_yn != null and '' != file_final_yn">
				file_final_yn = #{file_final_yn},	
			</if>
			<if test="file_name != null and '' != file_name">
				file_name = #{file_name},
			</if>
			updater = #{updater} , date_updated = NOW()
			
		WHERE
			file_group = #{file_group}
			AND file_no = ${file_no}
			
	</update>
	
	<update id="delFileInfo" parameterType="Map">
		UPDATE sy_file_info
		SET
			file_del_yn = 'Y', updater = #{updater}, date_updated  = NOW()
		WHERE 
			<foreach collection="param" item="fileInfo" open=" (file_group, file_no) IN (" separator=" UNION " close=")">
				SELECT #{fileInfo.file_group}, #{fileInfo.file_no}
			</foreach>	
	</update>
	
	<insert id="insRepairReportFile" parameterType="SYFileVo">
		INSERT INTO repair_file_info 
		(
			file_group, file_no, file_repo, file_cate, file_path, file_name, file_ext, file_size, date_created, date_updated, creator, updater
		)
		VALUES 
		(
			#{file_group},
			1,
			#{file_repo},
			#{file_cate},
			#{file_path},
			#{file_name},
			#{file_ext},
			${file_size},
			NOW(),
			NOW(),
			#{creator},
			#{updater}
		)
	</insert>	
	
	<update id="deleteRepairFile" parameterType="SYFileVo">
		UPDATE repair_file_info
		SET 
		file_del_yn = #{file_del_yn}, 
		date_updated = NOW(), updater = #{updater}
		WHERE
			file_group = #{file_group}
			<if test="file_no != null and '' != file_no">
				AND file_no = #{file_no}
			</if>
	</update>
	
	<update id="delFileByType" parameterType="Map">
		UPDATE sy_file_info
		SET file_del_yn = 'Y', updater = #{updater}, date_updated=NOW()
		WHERE
			<foreach collection="param" item="fileType" open="file_type_code IN (" separator=" , " close=")">
				#{fileType.file_type_code}
			</foreach>	
	</update>
	
	<update id="delFileByClass" parameterType="Map">
		UPDATE sy_file_info
		SET file_del_yn = 'Y', updater = #{updater}, date_updated=NOW()
		WHERE
			<foreach collection="param" item="fileClass" open="file_class_code IN (" separator=" , " close=")">
				#{fileClass.file_class_code}
			</foreach>	
	</update>
	<update id="delFileTypeByClass" parameterType="Map">
		UPDATE set_filetype_master
		SET del_yn = 'Y', updater = #{updater}, date_updated =NOW()
		WHERE 
		<foreach collection="param" item="fileClass" open="file_class_code IN (" separator=" , " close=")">
				#{fileClass.file_class_code}
			</foreach>	
	</update>
	
	
	
	
	
	<!--  jyp -->
	
</mapper>