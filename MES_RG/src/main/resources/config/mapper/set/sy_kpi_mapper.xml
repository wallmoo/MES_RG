<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.passcombine.set.dao.SYKPIDAO">

	<select id="selectRepairItem" parameterType="SYKPI_RepairVo"
		resultType="SYKPI_RepairVo">
		SELECT
		DISTINCT item_code , item_nm
		FROM repair_request_tbl
		WHERE del_yn = 'N'
		GROUP BY item_code

	</select>

	<select id="selectRepair" parameterType="SYKPI_RepairVo"
		resultType="SYKPI_RepairVo">
		SELECT
		item_code, item_nm,
		ym,
		g.year as year,
		g.month as month,
		out_date,
		SUM(IFNULL(cnt,0)) AS cnt,

		IFNULL((ROUND(( SUM(out_time_real) / COUNT(item_code) ),2)*24),0) AS avg,
		IFNULL((ROUND(( SUM(out_time) / SUM(cnt) ),2)/SUM(cnt)),0) AS d_avg, 
		
		IFNULL(( 
         SELECT 
   		 SUM(IFNULL(goal,0)) as goal
         FROM kpi_rpr_goal_info_tbl
         WHERE 1 = 1
         AND CODE = 'TAT'
         AND year = g.year
         AND month = g.month
         
        ),0) as goal
		
		FROM month_tbl as g
		LEFT JOIN
		(
		SELECT
		item_code, item_nm,
		LEFT(out_date,6) AS ym,
		concat(YEAR(out_date)) AS year,
		concat(MONTH(out_date)) AS month,
		out_date,
		TIMESTAMPDIFF(HOUR,
		DATE_FORMAT(proc1_date,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(proc6_date,'%Y-%m-%d %H:%i:%s')
		) AS finish_time,

		CASE WHEN (out_date_time IS NOT NULL)
		THEN 
		TIMESTAMPDIFF(HOUR,
		DATE_FORMAT(proc1_date,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(out_date_time,'%Y-%m-%d %H:%i:%s')
		) 
		ELSE 	
		TIMESTAMPDIFF(HOUR,
		DATE_FORMAT(proc1_date,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(out_date,'%Y-%m-%d %H:%i:%s')
		) 
		END AS out_time,
		
		
		CASE WHEN (out_date_time IS NOT NULL)
		THEN 
		((TIMESTAMPDIFF(HOUR,
		DATE_FORMAT(proc1_date,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(out_date_time,'%Y-%m-%d %H:%i:%s')
		))/COUNT(item_code)/COUNT(item_code)) 
		ELSE 	
		((TIMESTAMPDIFF(HOUR,
		DATE_FORMAT(proc1_date,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(out_date,'%Y-%m-%d %H:%i:%s')
		))/COUNT(item_code)/COUNT(item_code)) 
				
		END AS out_time_real,
		
		
		COUNT(item_code) AS cnt ,
		(
		SELECT COUNT(item_code)
		FROM repair_request_tbl
		WHERE del_yn = 'N'
		AND success_status = 'Y'
		AND item_code = rr.item_code
		AND concat(YEAR(out_date)) = concat(YEAR(rr.out_date))
		AND concat(month(out_date)) = concat(month(rr.out_date))
		AND out_date IS NOT NULL
		GROUP BY item_code
		) as total_cnt
		FROM repair_request_tbl AS rr
		WHERE del_yn = 'N'
		AND success_status = 'Y'
		AND out_date IS NOT NULL


		GROUP BY out_date, item_code, sernr
	
		)AS pp
		ON g.year = pp.year
		AND g.month = pp.month
		WHERE 1 = 1
		<if test="year != null and '' != year">
			AND g.year = #{year}
		</if>
		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>
		<if test="item_nm != null and '' != item_nm">
			AND item_nm = #{item_nm}
		</if>
		
		<if test="item_type_code != null and '' != item_type_code">
			AND 
			(
				SELECT item_type_code
				FROM material_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND item_code = pp.item_code
				LIMIT 1
			
			) = #{item_type_code}
		</if>

		GROUP BY year, month



	</select>

	<select id="selectRepair2" parameterType="SYKPI_RepairVo"
		resultType="SYKPI_RepairVo">
		SELECT
		item_code, item_nm,
		ym,
		year,
		month,
		out_date,
		SUM(cnt) AS cnt,
		ROUND(( SUM(out_time) / SUM(cnt) )/24,1) AS avg,
		ROUND(( SUM(out_time) / SUM(cnt) )/SUM(cnt)/24,1) AS d_avg
		FROM
		(
		SELECT
		item_code, item_nm,
		LEFT(out_date,6) AS ym,
		concat(YEAR(out_date)) AS year,
		concat(MONTH(out_date)) AS month,
		out_date,
		TIMESTAMPDIFF(HOUR,
		DATE_FORMAT(proc1_date,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(proc6_date,'%Y-%m-%d %H:%i:%s')
		) AS finish_time,
		CASE WHEN (out_date_time IS NOT NULL)
		THEN 
		TIMESTAMPDIFF(HOUR,
		DATE_FORMAT(proc1_date,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(out_date_time,'%Y-%m-%d %H:%i:%s')
		) 
		ELSE 	
		TIMESTAMPDIFF(HOUR,
		DATE_FORMAT(proc1_date,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(out_date,'%Y-%m-%d %H:%i:%s')
		) 
		END AS out_time,
		COUNT(item_code) AS cnt ,
		(
		SELECT COUNT(item_code)
		FROM repair_request_tbl
		WHERE del_yn = 'N'
		AND success_status = 'Y'
		AND item_code = rr.item_code
		AND out_date IS NOT NULL
		GROUP BY item_code
		) as total_cnt

		FROM repair_request_tbl AS rr
		WHERE del_yn = 'N'
		AND success_status = 'Y'
		AND out_date IS NOT NULL


		GROUP BY out_date, item_code, sernr

		)AS pp

		WHERE 1 = 1


		<if test="year != null and '' != year">
			AND year = #{year}
		</if>
		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>
		<if test="item_nm != null and '' != item_nm">
			AND item_nm = #{item_nm}
		</if>

		<if test="item_type_code != null and '' != item_type_code">
			AND 
			(
				SELECT item_type_code
				FROM material_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND item_code = pp.item_code
				LIMIT 1
			
			) = #{item_type_code}
		</if>

		GROUP BY year, month , item_code



	</select>


	<select id="selectRepair3" parameterType="SYKPI_RepairVo"
		resultType="SYKPI_RepairVo">
		SELECT
		item_code, item_nm,
		ym,
		year,
		month,
		out_date,
		SUM(cnt) AS cnt,
		ROUND(( SUM(out_time) / SUM(cnt) )/24,1) AS avg,
		ROUND(( SUM(out_time) / SUM(cnt) )/SUM(cnt),2)AS d_avg,
		sernr
		FROM
		(
		SELECT
		item_code, item_nm,
		LEFT(out_date,6) AS ym,
		concat(YEAR(out_date)) AS year,
		concat(MONTH(out_date)) AS month,
		out_date,
		TIMESTAMPDIFF(HOUR,
		DATE_FORMAT(proc1_date,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(proc6_date,'%Y-%m-%d %H:%i:%s')
		) AS finish_time,
		CASE WHEN (out_date_time IS NOT NULL)
		THEN 
		TIMESTAMPDIFF(HOUR,
		DATE_FORMAT(proc1_date,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(out_date_time,'%Y-%m-%d %H:%i:%s')
		) 
		ELSE 	
		TIMESTAMPDIFF(HOUR,
		DATE_FORMAT(proc1_date,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(out_date,'%Y-%m-%d %H:%i:%s')
		) 
		END AS out_time,
		COUNT(item_code) AS cnt ,
		(
		SELECT COUNT(item_code)
		FROM repair_request_tbl
		WHERE del_yn = 'N'
		AND success_status = 'Y'
		AND item_code = rr.item_code
		AND out_date IS NOT NULL
		GROUP BY item_code
		) as total_cnt,
		sernr
		FROM repair_request_tbl AS rr
		WHERE del_yn = 'N'
		AND success_status = 'Y'
		AND out_date IS NOT NULL


		GROUP BY out_date, item_code, sernr

		)AS pp

		WHERE 1 = 1
		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>
		<if test="item_nm != null and '' != item_nm">
			AND item_nm = #{item_nm}
		</if>
		
		<if test="item_type_code != null and '' != item_type_code">
			AND 
			(
				SELECT item_type_code
				FROM material_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND item_code = pp.item_code
				LIMIT 1
			
			) = #{item_type_code}
		</if>

		GROUP BY year, month , item_code, sernr, out_date

		ORDER BY out_date, item_code asc

	</select>








	<select id="selectProduct" parameterType="SYKPI_ProductVo" resultType="SYKPI_ProductVo">

		SELECT
			product_po, g.YEAR as year, g.MONTH as month,
			item_code, item_nm,
			product_req_date, product_date,
			IFNULL(process_time,0) as process_time , IFNULL(order_menge,0) as order_menge,
			IFNULL(prod_menge,0) as prod_menge,
			IFNULL(prod_fail_menge,0) as prod_fail_menge,
			IFNULL(fail_per,0) as fail_per,
			IFNULL(( 
	         SELECT 
	   		 SUM(IFNULL(goal,0)) as goal
	         FROM kpi_prdct_goal_info_tbl
	         WHERE 1 = 1
	         AND CODE = 'TAT'
	         AND year = g.year
	         AND month = g.month
	         
	        ),0) as goal

		FROM month_tbl as g
		LEFT JOIN
			(
			SELECT

				product_po, YEAR, MONTH,
				item_code, item_nm,
				product_req_date, product_date,
		
				IFNULL((ROUND((SUM(TIMESTAMPDIFF(second,
				DATE_FORMAT(prod_str_time,'%Y-%m-%d %H:%i:%s'),
				DATE_FORMAT(prod_end_time,'%Y-%m-%d %H:%i:%s')
				)/3600))/SUM(prod_menge),2)*24),0) AS process_time,
		
				SUM(order_menge) as order_menge,
				SUM(prod_menge) as prod_menge,
				SUM(prod_fail_menge) as prod_fail_menge,
		
				CONCAT(ROUND((SUM(prod_fail_menge) / SUM(order_menge)) *100,1),'%') AS fail_per
	
				FROM 
				(
		
				SELECT
		
					p.product_po,
					concat(YEAR(p.product_date)) AS year,
					concat(MONTH(p.product_date)) AS month,
					p.item_code, p.item_nm,
					p.product_req_date, p.product_date,
					(
					SELECT prod_str_time
					FROM product_operation_tbl
					WHERE del_yn = 'N'
					AND product_po = p.product_po
					ORDER BY real_seq*1 ASC LIMIT 1
					) AS prod_str_time,
					(
					SELECT prod_end_time
					FROM product_operation_tbl
					WHERE del_yn = 'N'
					AND product_po = p.product_po
					ORDER BY real_seq*1 DESC LIMIT 1
					) AS prod_end_time,
					po.real_seq,
					(
					SELECT real_seq
					FROM product_operation_tbl
					WHERE del_yn = 'N'
					AND product_po = p.product_po
					ORDER BY real_seq*1 DESC LIMIT 1
					) AS max_real_seq,
					(
					SELECT COUNT(item_code)
					FROM product_tbl
					WHERE del_yn = 'N'
					AND product_po = p.product_po
					GROUP BY item_code
			
					) AS cnt,
					IFNULL(p.order_menge,0) AS order_menge,
					IFNULL(po.prod_menge,0) AS prod_menge,
					IFNULL(po.prod_fail_menge,0) AS prod_fail_menge
	
				FROM product_tbl AS p
				LEFT JOIN product_operation_tbl AS po
				ON p.product_po = po.product_po
	
				WHERE 1 = 1
				AND p.del_yn = 'N'
				AND po.del_yn = 'N'
				AND p.product_status = 'y'
				AND po.prod_end_time IS NOT NULL
			
				<if test="item_type_code != null and '' != item_type_code">
				AND 
				(
					SELECT item_type_code
					FROM material_tbl
					WHERE 1 = 1 
					AND del_yn = 'N'
					AND item_code = p.item_code
					LIMIT 1
				
				) = #{item_type_code}
				</if>
	
				) AS pp
				WHERE 1 = 1
				AND real_seq = max_real_seq
		
				<if test="year != null and '' != year">
					AND year = #{year}
				</if>
				
				<if test="item_code != null and '' != item_code">
					AND item_code = #{item_code}
				</if>
				<if test="item_nm != null and '' != item_nm">
					AND item_nm = #{item_nm}
				</if>
		
				GROUP BY year, month
			) as ppp
			
			
			ON g.year = ppp.year
			AND g.month = ppp.month
			WHERE 1 = 1
			<if test="year != null and '' != year">
				AND g.year = #{year}
			</if>
			
			
			ORDER BY g.month*1 asc



	</select>


	<select id="selectProduct2" parameterType="SYKPI_ProductVo"
		resultType="SYKPI_ProductVo">

		SELECT

		product_po, YEAR, MONTH,
		item_code, item_nm,
		product_req_date, product_date,

		ROUND((SUM(TIMESTAMPDIFF(second,
		DATE_FORMAT(prod_str_time,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(prod_end_time,'%Y-%m-%d %H:%i:%s')
		)/3600))/SUM(cnt)/24,1) AS process_time,

		SUM(order_menge) as order_menge,
		SUM(prod_menge) as prod_menge,
		SUM(prod_fail_menge) as prod_fail_menge,
		ROUND
		(( SUM(TIMESTAMPDIFF(second,
		DATE_FORMAT(prod_str_time,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(prod_end_time,'%Y-%m-%d %H:%i:%s')
		)/3600) / SUM(cnt))/SUM(prod_menge)/24,1) AS d_process_time,

		CONCAT(ROUND((SUM(prod_fail_menge) / ( SUM(prod_menge) +
		SUM(prod_fail_menge) ) ) *100,1),'%') AS fail_per


		FROM
		(

		SELECT

		p.product_po,
		concat(YEAR(p.product_date)) AS year,
		concat(MONTH(p.product_date)) AS month,
		p.item_code, p.item_nm,
		p.product_req_date, p.product_date,
		(
		SELECT prod_str_time
		FROM product_operation_tbl
		WHERE del_yn = 'N'
		AND product_po = p.product_po
		ORDER BY real_seq*1 ASC LIMIT 1
		) AS prod_str_time,
		(
		SELECT prod_end_time
		FROM product_operation_tbl
		WHERE del_yn = 'N'
		AND product_po = p.product_po
		ORDER BY real_seq*1 DESC LIMIT 1
		) AS prod_end_time,
		po.real_seq,
		(
		SELECT real_seq
		FROM product_operation_tbl
		WHERE del_yn = 'N'
		AND product_po = p.product_po
		ORDER BY real_seq*1 DESC LIMIT 1
		) AS max_real_seq,
		(
		SELECT COUNT(item_code)
		FROM product_tbl
		WHERE del_yn = 'N'
		AND product_po = p.product_po
		GROUP BY item_code

		) AS cnt,
		IFNULL(p.order_menge,0) AS order_menge,
		IFNULL(po.prod_menge,0) AS prod_menge,
		IFNULL(po.prod_fail_menge,0) AS prod_fail_menge

		FROM product_tbl AS p
		LEFT JOIN product_operation_tbl AS po
		ON p.product_po = po.product_po

		WHERE 1 = 1
		AND p.del_yn = 'N'
		AND po.del_yn = 'N'
		AND p.product_status = 'y'
		AND po.prod_end_time IS NOT NULL
		
		<if test="item_type_code != null and '' != item_type_code">
			AND 
			(
				SELECT item_type_code
				FROM material_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND item_code = p.item_code
				LIMIT 1
			
			) = #{item_type_code}
		</if>

		) AS pp
		WHERE 1 = 1
		AND real_seq = max_real_seq

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>
		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>
		<if test="item_nm != null and '' != item_nm">
			AND item_nm = #{item_nm}
		</if>

		GROUP BY year, month, item_code



	</select>



	<select id="selectProduct3" parameterType="SYKPI_ProductVo"
		resultType="SYKPI_ProductVo">

		SELECT

		product_po, YEAR, MONTH,
		item_code, item_nm,
		product_req_date, product_date,

		ROUND((SUM(TIMESTAMPDIFF(second,
		DATE_FORMAT(prod_str_time,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(prod_end_time,'%Y-%m-%d %H:%i:%s')
		)/3600))/SUM(cnt)/24,1) AS process_time,

		SUM(order_menge) as order_menge,
		SUM(prod_menge) as prod_menge,
		SUM(prod_fail_menge) as prod_fail_menge,
		ROUND
		(( SUM(TIMESTAMPDIFF(second,
		DATE_FORMAT(prod_str_time,'%Y-%m-%d %H:%i:%s'),
		DATE_FORMAT(prod_end_time,'%Y-%m-%d %H:%i:%s')
		)/3600) / SUM(cnt))/SUM(prod_menge),2) AS d_process_time,

		CONCAT(ROUND((SUM(prod_fail_menge) / ( SUM(prod_menge) +
		SUM(prod_fail_menge) ) ) *100,1),'%') AS fail_per


		FROM
		(

		SELECT

		p.product_po,
		concat(YEAR(p.product_date)) AS year,
		concat(MONTH(p.product_date)) AS month,
		p.item_code, p.item_nm,
		p.product_req_date, p.product_date,
		(
		SELECT prod_str_time
		FROM product_operation_tbl
		WHERE del_yn = 'N'
		AND product_po = p.product_po
		ORDER BY real_seq*1 ASC LIMIT 1
		) AS prod_str_time,
		(
		SELECT prod_end_time
		FROM product_operation_tbl
		WHERE del_yn = 'N'
		AND product_po = p.product_po
		ORDER BY real_seq*1 DESC LIMIT 1
		) AS prod_end_time,
		po.real_seq,
		(
		SELECT real_seq
		FROM product_operation_tbl
		WHERE del_yn = 'N'
		AND product_po = p.product_po
		ORDER BY real_seq*1 DESC LIMIT 1
		) AS max_real_seq,
		(
		SELECT COUNT(item_code)
		FROM product_tbl
		WHERE del_yn = 'N'
		AND product_po = p.product_po
		GROUP BY item_code

		) AS cnt,
		IFNULL(p.order_menge,0) AS order_menge,
		IFNULL(po.prod_menge,0) AS prod_menge,
		IFNULL(po.prod_fail_menge,0) AS prod_fail_menge

		FROM product_tbl AS p
		LEFT JOIN product_operation_tbl AS po
		ON p.product_po = po.product_po

		WHERE 1 = 1
		AND p.del_yn = 'N'
		AND po.del_yn = 'N'
		AND p.product_status = 'y'
		AND po.prod_end_time IS NOT NULL
		
		<if test="item_type_code != null and '' != item_type_code">
			AND 
			(
				SELECT item_type_code
				FROM material_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND item_code = p.item_code
				LIMIT 1
			
			) = #{item_type_code}
		</if>

		) AS pp
		WHERE 1 = 1
		AND real_seq = max_real_seq

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>
		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>
		<if test="item_nm != null and '' != item_nm">
			AND item_nm = #{item_nm}
		</if>

		GROUP BY year, month, item_code, product_po

		ORDER BY product_date , item_code asc


	</select>








	<!-- <select id="selectPurchaseList" parameterType="SYKPI_PurchaseVo" resultType="SYKPI_PurchaseVo"> 
		SELECT account_code, account_nm, YEAR, MONTH, item_code, item_nm, item_type_code, 
		item_type_nm, unit_price, SUM(menge) AS menge, SUM(round(total_price)) AS 
		total_price, SUM(in_menge) AS in_menge, SUM((round(in_menge) * unit_price)) 
		AS in_price, SUM(no_menge) AS no_menge, SUM((ROUND(no_menge) * unit_price)) 
		AS no_price FROM ( SELECT om.account_code, om.account_nm, od.purchase_order_num, 
		od.purchase_num, CONCAT(YEAR(om.purchase_date)) AS YEAR, CONCAT(MONTH(om.purchase_date)) 
		AS MONTH, om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status, 
		od.item_code, od.item_nm, od.item_spec, od.item_type_code, od.item_type_nm, 
		od.unit_price, ifnull(od.menge,0) as menge, ifnull(od.in_menge,0) as in_menge, 
		(ifnull(menge,0) - ifnull(in_menge,0)) AS no_menge, od.total_price, ( SELECT 
		safety_menge FROM material_tbl WHERE del_yn = 'N' AND safety_stock_yn = 'Y' 
		AND item_code = od.item_code ) as safety_menge, ( SELECT warehousing_qty 
		FROM warehouse_tbl WHERE del_yn = 'N' AND item_code = od.item_code ORDER 
		BY date_updated desc LIMIT 1 ) as warehousing_qty, od.creator, od.updater, 
		od.date_created, od.date_updated FROM purchase_order_detail AS od LEFT JOIN 
		purchase_order_master om ON od.purchase_order_num= om.purchase_order_num 
		WHERE 1 = 1 AND od.del_yn = 'N' GROUP BY om.purchase_date, account_code, 
		item_code ) AS pp WHERE 1 = 1 <if test="year != null and '' != year"> AND 
		year = #{year} </if> <if test="account_code != null and '' != account_code"> 
		AND account_code = #{account_code} </if> <if test="item_code != null and 
		'' != item_code"> AND item_code = #{item_code} </if> <if test="item_type_code 
		!= null and '' != item_type_code"> AND item_type_code = #{item_type_code} 
		</if> <if test="account_nm != null and '' != account_nm"> AND account_code 
		= (select account_code from purchase_order_master where account_nm = #{account_nm}) 
		</if> GROUP BY YEAR, account_code, item_code ORDER BY total_price desc </select> -->

	 <select id="selectPurchaseList" parameterType="SYKPI_PurchaseVo"
		resultType="SYKPI_PurchaseVo">

		SELECT

		account_code, account_nm, YEAR, MONTH, purchase_date,
		item_code, item_nm,
		item_type_code, item_type_nm,
		unit_price,
		menge,
		round(total_price) AS total_price,
		in_menge,
		(round(in_menge) * unit_price) AS in_price,
		no_menge,
		(ROUND(no_menge) * unit_price) AS no_price
		FROM

		(
		SELECT
		om.account_code, om.account_nm,
		od.purchase_order_num, od.purchase_num,
		CONCAT(YEAR(om.purchase_date)) AS YEAR,
		CONCAT(MONTH(om.purchase_date)) AS MONTH,
		om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status,
		od.item_code, od.item_nm, od.item_spec, od.item_type_code,
		od.item_type_nm,
		od.unit_price, ifnull(od.menge,0) as menge, ifnull(od.in_menge,0) as in_menge,
		(ifnull(menge,0) - ifnull(in_menge,0)) AS no_menge,
		od.total_price,
		(
		SELECT
		safety_menge
		FROM material_tbl
		WHERE del_yn = 'N'
		AND safety_stock_yn = 'Y'
		AND item_code = od.item_code

		) as safety_menge,
		(
		SELECT
		warehousing_qty
		FROM warehouse_tbl
		WHERE del_yn = 'N'
		AND item_code = od.item_code
		ORDER BY date_updated desc
		LIMIT 1
		) as warehousing_qty,
		od.creator, od.updater, od.date_created, od.date_updated
		FROM purchase_order_detail AS od

		LEFT JOIN purchase_order_master om
		ON od.purchase_order_num= om.purchase_order_num

		WHERE 1 = 1
		AND od.del_yn = 'N'


		GROUP BY om.purchase_date, account_code, item_code
		) AS pp


		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>

		<if
			test="account_code != null and !'ETC'.equals( account_code ) and !''.equals( account_code )">
			AND account_code = #{account_code}
		</if>
		<if test="account_code != null and 'ETC'.equals( account_code )">
			AND account_code NOT IN (
			SELECT
			IFNULL(account_code,'---')
			FROM (
			SELECT
			account_code, year, SUM(round(total_price)) AS total_price
			FROM
			(

			SELECT
			om.account_code, om.account_nm,

			CONCAT(YEAR(om.purchase_date)) AS YEAR,
			CONCAT(MONTH(om.purchase_date)) AS MONTH,
			od.total_price, item_code

			FROM purchase_order_detail AS od

			LEFT JOIN purchase_order_master om
			ON od.purchase_order_num= om.purchase_order_num

			WHERE 1 = 1
			AND od.del_yn = 'N'
			<if test="year != null and '' != year">
				AND CONCAT(YEAR(om.purchase_date)) = #{year}
			</if>
			<if test="month != null and '' != month">
				AND CONCAT(MONTH(om.purchase_date)) = #{month}
			</if>
			GROUP BY om.purchase_date,account_code, item_code
			) AS pp

			WHERE 1 = 1

			GROUP BY YEAR, account_code
			ORDER BY total_price DESC
			LIMIT 5
			) as t
			)
		</if>
		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>

		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>

		<if test="account_nm != null and '' != account_nm">
			AND account_code = (select account_code from
			purchase_order_master where
			account_nm = #{account_nm})
		</if>

		<if test="gubun != null and 'in'.equals( gubun )">
			AND in_menge > 0
		</if>
		<if test="gubun != null and 'no'.equals( gubun )">
			AND no_menge > 0
		</if>

	</select> 
	
	
	<!-- 210112 -->
	<select id="selectPurchaseList_total" parameterType="SYKPI_PurchaseVo"
		resultType="SYKPI_PurchaseVo">

		SELECT

		account_code, account_nm, YEAR, MONTH, purchase_date,
		item_code, item_nm,
		item_type_code, item_type_nm,
		menge,
      total_price

		FROM

		(
		SELECT
		om.account_code, om.account_nm,
		od.purchase_order_num, od.purchase_num,
		CONCAT(YEAR(om.purchase_date)) AS YEAR,
		CONCAT(MONTH(om.purchase_date)) AS MONTH,
		om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status,
		od.item_code, od.item_nm, od.item_spec, od.item_type_code,
		od.item_type_nm,
		od.menge,
		SUM(od.total_price) as total_price,
	
		od.creator, od.updater, od.date_created, od.date_updated
		FROM purchase_order_detail AS od

		LEFT JOIN purchase_order_master om
		ON od.purchase_order_num= om.purchase_order_num

		WHERE 1 = 1
		AND od.del_yn = 'N'


		GROUP BY om.purchase_date, account_code, item_code
		) AS pp


		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>

		<if
			test="account_code != null and !'ETC'.equals( account_code ) and !''.equals( account_code )">
			AND account_code = #{account_code}
		</if>
		<if test="account_code != null and 'ETC'.equals( account_code )">
			AND account_code NOT IN (
			SELECT
			IFNULL(account_code,'---')
			FROM (
			SELECT
			account_code, year, SUM(round(total_price)) AS total_price
			FROM
			(

			SELECT
			om.account_code, om.account_nm,

			CONCAT(YEAR(om.purchase_date)) AS YEAR,
			CONCAT(MONTH(om.purchase_date)) AS MONTH,
			od.total_price, item_code

			FROM purchase_order_detail AS od

			LEFT JOIN purchase_order_master om
			ON od.purchase_order_num= om.purchase_order_num

			WHERE 1 = 1
			AND od.del_yn = 'N'
			<if test="year != null and '' != year">
				AND CONCAT(YEAR(om.purchase_date)) = #{year}
			</if>
			<if test="month != null and '' != month">
				AND CONCAT(MONTH(om.purchase_date)) = #{month}
			</if>
			GROUP BY om.purchase_date,account_code, item_code
			) AS pp

			WHERE 1 = 1

			GROUP BY YEAR, account_code
			ORDER BY SUM(round(total_price))*1 DESC
			LIMIT 5
			) as t
			)
		</if>
		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>

		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>

		<if test="account_nm != null and '' != account_nm">
			AND account_code = (select account_code from
			purchase_order_master where
			account_nm = #{account_nm})
		</if>


		ORDER BY total_price*1 desc
	</select>
	
	<select id="selectPurchaseList_in" parameterType="SYKPI_PurchaseVo"
		resultType="SYKPI_PurchaseVo">

		SELECT

		account_code, account_nm, YEAR, MONTH, purchase_date,
		item_code, item_nm,
		item_type_code, item_type_nm,
		in_menge,
		in_price

		FROM

		(
		SELECT
		om.account_code, om.account_nm,
		od.purchase_order_num, od.purchase_num,
		CONCAT(YEAR(od.purchase_end_date)) AS YEAR,
		CONCAT(MONTH(od.purchase_end_date)) AS MONTH,
		om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status,
		od.item_code, od.item_nm, od.item_spec, od.item_type_code,
		od.item_type_nm,
		in_menge,
		SUM(od.in_menge * od.unit_price) AS in_price,
		od.creator, od.updater, od.date_created, od.date_updated
		FROM purchase_order_detail AS od

		LEFT JOIN purchase_order_master om
		ON od.purchase_order_num= om.purchase_order_num

		WHERE 1 = 1
		AND od.del_yn = 'N'


		GROUP BY om.purchase_date, account_code, item_code
		) AS pp


		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>

		<if
			test="account_code != null and !'ETC'.equals( account_code ) and !''.equals( account_code )">
			AND account_code = #{account_code}
		</if>
		<if test="account_code != null and 'ETC'.equals( account_code )">
			AND account_code NOT IN (
			SELECT
			IFNULL(account_code,'---')
			FROM (
			SELECT
			account_code, year, SUM(round(total_price)) AS total_price
			FROM
			(

			SELECT
			om.account_code, om.account_nm,

			CONCAT(YEAR(od.purchase_end_date)) AS YEAR,
			CONCAT(MONTH(od.purchase_end_date)) AS MONTH,
			SUM(od.in_menge * od.unit_price) AS total_price , item_code

			FROM purchase_order_detail AS od

			LEFT JOIN purchase_order_master om
			ON od.purchase_order_num= om.purchase_order_num

			WHERE 1 = 1
			AND od.del_yn = 'N'
			<if test="year != null and '' != year">
				AND CONCAT(YEAR(od.purchase_end_date)) = #{year}
			</if>
			<if test="month != null and '' != month">
				AND CONCAT(MONTH(od.purchase_end_date)) = #{month}
			</if>
			GROUP BY od.purchase_end_date,account_code, item_code
			) AS pp

			WHERE 1 = 1

			GROUP BY YEAR, account_code
			ORDER BY SUM(round(total_price))*1 DESC
			LIMIT 5
			) as t
			)
		</if>
		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>

		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>

		<if test="account_nm != null and '' != account_nm">
			AND account_code = (select account_code from
			purchase_order_master where
			account_nm = #{account_nm})
		</if>

		
		ORDER BY in_price*1 DESC

	</select>
	
	<select id="selectPurchaseList_no" parameterType="SYKPI_PurchaseVo"
		resultType="SYKPI_PurchaseVo">

		SELECT

		account_code, account_nm, YEAR, MONTH, purchase_date,
		item_code, item_nm,
		item_type_code, item_type_nm,
		no_menge,
		no_price
		FROM

		(
		SELECT
		om.account_code, om.account_nm,
		od.purchase_order_num, od.purchase_num,
		CONCAT(YEAR(om.purchase_date)) AS YEAR,
		CONCAT(MONTH(om.purchase_date)) AS MONTH,
		om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status,
		od.item_code, od.item_nm, od.item_spec, od.item_type_code,
		od.item_type_nm,
		( IFNULL(od.menge,0) - IFNULL(od.in_menge,0) ) as no_menge,
		(IFNULL(od.total_price,0) - (IFNULL(od.in_menge,0)*IFNULL(od.unit_price,0))) AS no_price,
		od.creator, od.updater, od.date_created, od.date_updated
		FROM purchase_order_detail AS od

		LEFT JOIN purchase_order_master om
		ON od.purchase_order_num= om.purchase_order_num

		WHERE 1 = 1
		AND od.del_yn = 'N'


		GROUP BY om.purchase_date, account_code, item_code
		) AS pp


		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>

		<if
			test="account_code != null and !'ETC'.equals( account_code ) and !''.equals( account_code )">
			AND account_code = #{account_code}
		</if>
		<if test="account_code != null and 'ETC'.equals( account_code )">
			AND account_code NOT IN (
			SELECT
			IFNULL(account_code,'---')
			FROM (
			SELECT
			account_code, year, SUM(round(total_price)) AS total_price
			FROM
			(

			SELECT
			om.account_code, om.account_nm,

			CONCAT(YEAR(om.purchase_date)) AS YEAR,
			CONCAT(MONTH(om.purchase_date)) AS MONTH,
			(od.total_price - (od.in_menge*od.unit_price)) AS total_price, item_code

			FROM purchase_order_detail AS od

			LEFT JOIN purchase_order_master om
			ON od.purchase_order_num= om.purchase_order_num

			WHERE 1 = 1
			AND od.del_yn = 'N'
			<if test="year != null and '' != year">
				AND CONCAT(YEAR(om.purchase_date)) = #{year}
			</if>
			<if test="month != null and '' != month">
				AND CONCAT(MONTH(om.purchase_date)) = #{month}
			</if>
			GROUP BY om.purchase_date,account_code, item_code
			) AS pp

			WHERE 1 = 1

			GROUP BY YEAR, account_code
			ORDER BY SUM(round(total_price))*1 DESC
			LIMIT 5
			) as t
			)
		</if>
		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>

		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>

		<if test="account_nm != null and '' != account_nm">
			AND account_code = (select account_code from
			purchase_order_master where
			account_nm = #{account_nm})
		</if>

		
		ORDER BY no_price*1 DESC

	</select>

	<select id="selectPurchaseGraph" parameterType="SYKPI_PurchaseVo"
		resultType="SYKPI_PurchaseVo">

		(
		SELECT

		account_code, account_nm, YEAR, MONTH,
		item_code, item_nm, item_type_code, item_type_nm,
		SUM(menge) AS menge,
		SUM(round(total_price)) AS total_price,
		SUM(in_menge) AS in_menge,
		SUM((round(in_menge) * unit_price)) AS in_price,
		SUM(no_menge) AS no_menge,
		SUM((ROUND(no_menge) * unit_price)) AS no_price
		FROM

		(


		SELECT
		om.account_code, om.account_nm,
		od.purchase_order_num, od.purchase_num,
		CONCAT(YEAR(om.purchase_date)) AS YEAR,
		CONCAT(MONTH(om.purchase_date)) AS MONTH,
		om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status,
		od.item_code, od.item_nm, od.item_spec, od.item_type_code,
		od.item_type_nm,
		od.unit_price, ifnull(od.menge,0) as menge, ifnull(od.in_menge,0) as in_menge,
		(ifnull(menge,0) - ifnull(in_menge,0)) AS no_menge,
		od.total_price,

		(
		SELECT
		safety_menge
		FROM material_tbl
		WHERE del_yn = 'N'
		AND safety_stock_yn = 'Y'
		AND item_code = od.item_code

		) as safety_menge,

		(
		SELECT
		warehousing_qty
		FROM warehouse_tbl
		WHERE del_yn = 'N'
		AND item_code = od.item_code
		ORDER BY date_updated desc
		LIMIT 1
		) as warehousing_qty,

		od.creator, od.updater, od.date_created, od.date_updated
		FROM purchase_order_detail AS od

		LEFT JOIN purchase_order_master om
		ON od.purchase_order_num= om.purchase_order_num

		WHERE 1 = 1
		AND od.del_yn = 'N'



		GROUP BY om.purchase_date,account_code, item_code
		) AS pp

		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>

		<if test="account_code != null and '' != account_code">
			AND account_code = #{account_code}
		</if>

		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>

		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>
		<if test="account_nm != null and '' != account_nm">
			AND account_code = (select account_code from purchase_order_master where
			account_nm = #{account_nm})
		</if>

		<if test="gubun != null and 'in'.equals( gubun )">
			AND in_menge > 0
		</if>
		<if test="gubun != null and 'no'.equals( gubun )">
			AND no_menge > 0
		</if>



		GROUP BY YEAR, account_code

		ORDER BY total_price DESC
		LIMIT 5
		)


		UNION

		SELECT
		'ETC' as account_code, '기타' as account_nm, YEAR, MONTH,
		item_code, item_nm, item_type_code, item_type_nm,
		sum(menge), sum(total_price),
		sum(in_menge), sum(in_price),
		sum(no_menge), sum(no_price)
		FROM
		(
		SELECT

		account_code, account_nm, YEAR, MONTH,
		item_code, item_nm, item_type_code, item_type_nm,
		SUM(menge) AS menge,
		SUM(round(total_price)) AS total_price,
		SUM(in_menge) AS in_menge,
		SUM((round(in_menge) * unit_price)) AS in_price,
		SUM(no_menge) AS no_menge,
		SUM((ROUND(no_menge) * unit_price)) AS no_price
		FROM

		(


		SELECT
		om.account_code, om.account_nm,
		od.purchase_order_num, od.purchase_num,
		CONCAT(YEAR(om.purchase_date)) AS YEAR,
		CONCAT(MONTH(om.purchase_date)) AS MONTH,
		om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status,
		od.item_code, od.item_nm, od.item_spec, od.item_type_code,
		od.item_type_nm,
		od.unit_price, ifnull(od.menge,0) as menge, ifnull(od.in_menge,0) as in_menge,
		(ifnull(menge,0) - ifnull(in_menge,0)) AS no_menge,
		od.total_price,

		(
		SELECT
		safety_menge
		FROM material_tbl
		WHERE del_yn = 'N'
		AND safety_stock_yn = 'Y'
		AND item_code = od.item_code

		) as safety_menge,

		(
		SELECT
		warehousing_qty
		FROM warehouse_tbl
		WHERE del_yn = 'N'
		AND item_code = od.item_code
		ORDER BY date_updated desc
		LIMIT 1
		) as warehousing_qty,

		od.creator, od.updater, od.date_created, od.date_updated
		FROM purchase_order_detail AS od

		LEFT JOIN purchase_order_master om
		ON od.purchase_order_num= om.purchase_order_num

		WHERE 1 = 1
		AND od.del_yn = 'N'



		GROUP BY om.purchase_date,account_code, item_code
		) AS pp

		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>
		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="account_code != null and '' != account_code">
			AND account_code = #{account_code}
		</if>

		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>

		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>
		<if test="account_nm != null and '' != account_nm">
			AND account_code = (select account_code from purchase_order_master where
			account_nm = #{account_nm})
		</if>

		<if test="gubun != null and 'in'.equals( gubun )">
			AND in_menge > 0
		</if>
		<if test="gubun != null and 'no'.equals( gubun )">
			AND no_menge > 0
		</if>


		GROUP BY YEAR, account_code

		ORDER BY total_price DESC
		LIMIT 5 , 18446744073709551615
		) AS etc



	</select>
	
	<!-- 210112 -->
	<select id="selectPurchaseGraph_in" parameterType="SYKPI_PurchaseVo"
		resultType="SYKPI_PurchaseVo">
   (
      SELECT

      account_code, account_nm, YEAR, MONTH,
      item_code, item_nm, item_type_code, item_type_nm,
      SUM(in_price) as in_price
      FROM

      (


      SELECT
      om.account_code, om.account_nm,
      od.purchase_order_num, od.purchase_num,
      CONCAT(YEAR(od.purchase_end_date)) AS YEAR,
      CONCAT(MONTH(od.purchase_end_date)) AS MONTH,
      om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status,
      od.item_code, od.item_nm, od.item_spec, od.item_type_code,
      od.item_type_nm,
      SUM(od.in_menge * od.unit_price) AS in_price,

      od.creator, od.updater, od.date_created, od.date_updated
      FROM purchase_order_detail AS od

      LEFT JOIN purchase_order_master om
      ON od.purchase_order_num= om.purchase_order_num

      WHERE 1 = 1
      AND od.del_yn = 'N'



      GROUP BY om.purchase_date,account_code, item_code
      ) AS pp

      WHERE 1 = 1

        <if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>

		<if test="account_code != null and '' != account_code">
			AND account_code = #{account_code}
		</if>

		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>

		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>
		<if test="account_nm != null and '' != account_nm">
			AND account_code = (select account_code from purchase_order_master where
			account_nm = #{account_nm})
		</if>



      GROUP BY YEAR, account_code

      ORDER BY in_price DESC
      LIMIT 5

      )
      
      UNION
      
      
      SELECT
      'ETC' as account_code, '기타' as account_nm, YEAR, MONTH,
      item_code, item_nm, item_type_code, item_type_nm,
      sum(in_price) AS in_price

      FROM
      (
      
      SELECT

      account_code, account_nm, YEAR, MONTH,
      item_code, item_nm, item_type_code, item_type_nm,
      SUM(in_price) AS in_price
      FROM

      (


      SELECT
      om.account_code, om.account_nm,
      od.purchase_order_num, od.purchase_num,
      CONCAT(YEAR(od.purchase_end_date)) AS YEAR,
      CONCAT(MONTH(od.purchase_end_date)) AS MONTH,
      om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status,
      od.item_code, od.item_nm, od.item_spec, od.item_type_code,
      od.item_type_nm,
      SUM(od.in_menge * od.unit_price) AS in_price,

      od.creator, od.updater, od.date_created, od.date_updated
      FROM purchase_order_detail AS od

      LEFT JOIN purchase_order_master om
      ON od.purchase_order_num= om.purchase_order_num

      WHERE 1 = 1
      AND od.del_yn = 'N'



      GROUP BY om.purchase_date,account_code, item_code
      ) AS pp

      WHERE 1 = 1
      
     	<if test="year != null and '' != year">
			AND year = #{year}
		</if>
		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="account_code != null and '' != account_code">
			AND account_code = #{account_code}
		</if>

		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>

		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>
		<if test="account_nm != null and '' != account_nm">
			AND account_code = (select account_code from purchase_order_master where
			account_nm = #{account_nm})
		</if>





      GROUP BY YEAR, account_code

      ORDER BY in_price DESC

      LIMIT 5 , 18446744073709551615
      ) AS etc

	</select>
	
	
	
	<select id="selectPurchaseGraph_total" parameterType="SYKPI_PurchaseVo"
		resultType="SYKPI_PurchaseVo">

		 (
      SELECT

      account_code, account_nm, YEAR, MONTH,
      item_code, item_nm, item_type_code, item_type_nm,
      SUM(total_price) AS total_price
      FROM

      (


      SELECT
      om.account_code, om.account_nm,
      od.purchase_order_num, od.purchase_num,
      CONCAT(YEAR(om.purchase_date)) AS YEAR,
      CONCAT(MONTH(om.purchase_date)) AS MONTH,
      om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status,
      od.item_code, od.item_nm, od.item_spec, od.item_type_code,
      od.item_type_nm,
      SUM(od.total_price) AS total_price,

      od.creator, od.updater, od.date_created, od.date_updated
      FROM purchase_order_detail AS od

      LEFT JOIN purchase_order_master om
      ON od.purchase_order_num= om.purchase_order_num

      WHERE 1 = 1
      AND od.del_yn = 'N'



      GROUP BY om.purchase_date,account_code, item_code
      ) AS pp

      WHERE 1 = 1

        <if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>

		<if test="account_code != null and '' != account_code">
			AND account_code = #{account_code}
		</if>

		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>

		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>
		<if test="account_nm != null and '' != account_nm">
			AND account_code = (select account_code from purchase_order_master where
			account_nm = #{account_nm})
		</if>




      GROUP BY YEAR, account_code

      ORDER BY total_price DESC
      LIMIT 5

      )
      
      UNION
      
      
      SELECT
      'ETC' as account_code, '기타' as account_nm, YEAR, MONTH,
      item_code, item_nm, item_type_code, item_type_nm,
      sum(total_price) AS total_price

      FROM
      (
      
      SELECT

      account_code, account_nm, YEAR, MONTH,
      item_code, item_nm, item_type_code, item_type_nm,
      SUM(total_price) AS total_price
      FROM

      (


      SELECT
      om.account_code, om.account_nm,
      od.purchase_order_num, od.purchase_num,
      CONCAT(YEAR(om.purchase_date)) AS YEAR,
      CONCAT(MONTH(om.purchase_date)) AS MONTH,
      om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status,
      od.item_code, od.item_nm, od.item_spec, od.item_type_code,
      od.item_type_nm,
      SUM(od.total_price) AS total_price,
      od.creator, od.updater, od.date_created, od.date_updated
      FROM purchase_order_detail AS od

      LEFT JOIN purchase_order_master om
      ON od.purchase_order_num= om.purchase_order_num

      WHERE 1 = 1
      AND od.del_yn = 'N'



      GROUP BY om.purchase_date,account_code, item_code
      ) AS pp

      WHERE 1 = 1
      
      
     	<if test="year != null and '' != year">
			AND year = #{year}
		</if>
		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="account_code != null and '' != account_code">
			AND account_code = #{account_code}
		</if>

		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>

		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>
		<if test="account_nm != null and '' != account_nm">
			AND account_code = (select account_code from purchase_order_master where
			account_nm = #{account_nm})
		</if>

      GROUP BY YEAR, account_code

      ORDER BY total_price DESC

      LIMIT 5 , 18446744073709551615
      ) AS etc
	</select>
	
	<select id="selectPurchaseGraph_no" parameterType="SYKPI_PurchaseVo"
		resultType="SYKPI_PurchaseVo">

	(
      SELECT

      account_code, account_nm, YEAR, MONTH,
      item_code, item_nm, item_type_code, item_type_nm,
      SUM(no_price) AS no_price
      FROM

      (


      SELECT
      om.account_code, om.account_nm,
      od.purchase_order_num, od.purchase_num,
      CONCAT(YEAR(om.purchase_date)) AS YEAR,
      CONCAT(MONTH(om.purchase_date)) AS MONTH,
      om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status,
      od.item_code, od.item_nm, od.item_spec, od.item_type_code,
      od.item_type_nm,
      SUM(od.total_price - (od.in_menge*od.unit_price)) AS no_price,

      od.creator, od.updater, od.date_created, od.date_updated
      FROM purchase_order_detail AS od

      LEFT JOIN purchase_order_master om
      ON od.purchase_order_num= om.purchase_order_num

      WHERE 1 = 1
      AND od.del_yn = 'N'



      GROUP BY om.purchase_date,account_code, item_code
      ) AS pp

      WHERE 1 = 1

        <if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>

		<if test="account_code != null and '' != account_code">
			AND account_code = #{account_code}
		</if>

		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>

		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>
		<if test="account_nm != null and '' != account_nm">
			AND account_code = (select account_code from purchase_order_master where
			account_nm = #{account_nm})
		</if>



      GROUP BY YEAR, account_code

      ORDER BY no_price DESC
      LIMIT 5

      )
      
      UNION
      
      
      SELECT
      'ETC' as account_code, '기타' as account_nm, YEAR, MONTH,
      item_code, item_nm, item_type_code, item_type_nm,
      sum(no_price) AS no_price

      FROM
      (
      
      SELECT

      account_code, account_nm, YEAR, MONTH,
      item_code, item_nm, item_type_code, item_type_nm,
      SUM(no_price) AS no_price
      FROM

      (


      SELECT
      om.account_code, om.account_nm,
      od.purchase_order_num, od.purchase_num,
      CONCAT(YEAR(om.purchase_date)) AS YEAR,
      CONCAT(MONTH(om.purchase_date)) AS MONTH,
      om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status,
      od.item_code, od.item_nm, od.item_spec, od.item_type_code,
      od.item_type_nm,
      SUM(od.total_price - (od.in_menge*od.unit_price)) AS no_price,
      od.creator, od.updater, od.date_created, od.date_updated
      FROM purchase_order_detail AS od

      LEFT JOIN purchase_order_master om
      ON od.purchase_order_num= om.purchase_order_num

      WHERE 1 = 1
      AND od.del_yn = 'N'



      GROUP BY om.purchase_date,account_code, item_code
      ) AS pp

      WHERE 1 = 1
      
		<if test="year != null and '' != year">
			AND year = #{year}
		</if>
		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="account_code != null and '' != account_code">
			AND account_code = #{account_code}
		</if>

		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>

		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>
		<if test="account_nm != null and '' != account_nm">
			AND account_code = (select account_code from purchase_order_master where
			account_nm = #{account_nm})
		</if>

      GROUP BY YEAR, account_code

      ORDER BY no_price DESC

      LIMIT 5 , 18446744073709551615
      ) AS etc
      
	</select>


	<select id="selectPurchaseSearch" parameterType="SYPurchaseOrderDetailVo"
		resultType="SYPurchaseOrderDetailVo">

		SELECT
		om.account_code, om.account_nm,
		od.item_code, od.item_nm, od.item_type_code, od.item_type_nm

		FROM purchase_order_detail AS od

		LEFT JOIN purchase_order_master om
		ON od.purchase_order_num= om.purchase_order_num

		WHERE 1 = 1
		AND od.del_yn = 'N'

		<if test="account_code != null and '' != account_code">
			AND account_code = #{account_code}
		</if>

		<if test="item_code != null and '' != item_code">
			AND item_code = #{item_code}
		</if>

		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>

		GROUP BY account_code

		ORDER BY om.account_nm asc

	</select>


	<!-- 201030 매출실적정보 -->
	<select id="selectSalesSearch" parameterType="SYKPI_SalesVo"
		resultType="SYKPI_SalesVo">

		SELECT

		dot.customer_code, dot.customer_nm

		FROM delivery_tbl AS dt
		LEFT JOIN delivery_order_tbl AS dot
		ON dt.delivery_num = dot.delivery_num

		WHERE 1 = 1
		AND dt.del_yn = 'N'
		AND dot.del_yn = 'N'

		<if test="customer_integration_code != null and '' != customer_integration_code">
		AND 
			(
				SELECT customer_integration_code
				FROM customer_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND customer_code = dot.customer_code 
				LIMIT 1
			
			) = #{customer_integration_code}
		</if>

	
		GROUP BY dot.customer_code

		ORDER BY dot.customer_nm asc

	</select>

	<!-- <select id="selectSalesGrid" parameterType="SYKPI_SalesVo"
		resultType="SYKPI_SalesVo">

		SELECT

		g.year as year,
		g.month as month,
		delivery_num, delivery_menge,
		delivery_date,
		order_num,
		item_code, item_nm,
		customer_code, customer_nm, land,
		unit_price,
		menge,
		ifnull(sum_price,0) as sum_price,
		IFNULL((
		SELECT
		IFNULL(SUM(sum_price),0) as ju_price
		FROM (

		SELECT

		concat(YEAR(o.date_created)) AS YEAR,
		concat(month(o.date_created)) AS month,
		o.order_num,
		o.item_code, o.item_nm,
		o.customer_code, o.customer_nm,
		SUM(o.total_price) AS sum_price

		FROM order_manager_tbl AS o
		WHERE 1 = 1

		GROUP BY YEAR, MONTH, item_code, customer_code

		) AS pp

		WHERE 1 = 1

		AND YEAR = g.year
		AND MONTH = g.month
		AND customer_code = pp.customer_code


		GROUP BY YEAR
		),0) as ju_price,
		IFNULL((
		SELECT

		SUM(sum_price) as no_price
		FROM (

		SELECT

		concat(YEAR(o.date_created)) AS YEAR,
		concat(month(o.date_created)) AS month,
		dot.order_num,
		dot.item_code, dot.item_nm,
		dot.customer_code, dot.customer_nm, dot.land,
		dot.unit_price,
		dot.menge,
		SUM(dot.total_price) AS sum_price,
		dot.success_status

		FROM delivery_order_tbl AS dot
		LEFT JOIN order_manager_tbl AS o
		ON dot.order_num = o.order_num

		WHERE 1 = 1

		AND dot.del_yn = 'N'
		AND dot.success_status = 'N'
		GROUP BY YEAR, MONTH, item_code, customer_code

		) AS pp

		WHERE 1 = 1

		AND YEAR = g.year
		AND MONTH = g.month
		AND customer_code = pp.customer_code


		GROUP BY YEAR
		),0) as no_price,

		success_status, 
		SUM(g.goal) as goal

		FROM kpi_customer_goal_info_tbl AS g
		LEFT JOIN
		(
		SELECT
		concat(YEAR(dt.delivery_date)) AS YEAR,
		concat(month(dt.delivery_date)) AS month,
		dt.delivery_num, dt.delivery_menge,
		dt.delivery_date,
		dot.order_num,
		dot.item_code, dot.item_nm,
		dot.customer_code, dot.customer_nm, dot.land,
		dot.unit_price,
		dot.menge,
		SUM(dot.total_price) AS sum_price,
		dot.success_status


		FROM delivery_tbl AS dt
		LEFT JOIN delivery_order_tbl AS dot
		ON dt.delivery_num = dot.delivery_num

		WHERE 1 = 1
		AND dt.del_yn = 'N'
		AND dot.del_yn = 'N'

		GROUP BY YEAR, month
		) AS pp

		ON pp.year = g.year
		AND pp.month = g.month

		WHERE 1 = 1
		<if test="customer_code != null and '' != customer_code">
		AND g.CODE = #{customer_code}
		</if>
		
		<if test="year != null and '' != year">
			AND g.year = #{year}
		</if>
		
		<if test="month != null and '' != month">
			AND g.month = #{month}
		</if>
		
		<if test="customer_integration_code != null and '' != customer_integration_code">
		AND g.CODE in 
			(
				SELECT customer_code
				FROM customer_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND customer_integration_code = #{customer_integration_code}

			)
		</if>
		
		GROUP BY year,month
	</select> -->
	<select id="selectSalesGrid" parameterType="SYKPI_SalesVo"
		resultType="SYKPI_SalesVo">

		   SELECT

		      g.year as year,
		      g.month as month,
		      delivery_num, delivery_menge,
		      delivery_date,
		      order_num,
		      item_code, item_nm,
		      customer_code, customer_nm, land,
		      unit_price,
		      menge,
		      ifnull(sum_price,0) as sum_price,
		      IFNULL((
		      SELECT
		      IFNULL(SUM(sum_price),0) as ju_price
		      FROM (
		
		      SELECT
		
		      concat(YEAR(o.delivery_date)) AS YEAR,
		      concat(month(o.delivery_date)) AS month,
		      o.order_num,
		      o.item_code, o.item_nm,
		      o.customer_code, o.customer_nm,
		      SUM(IFNULL(o.total_price,0)) AS sum_price
		
		      FROM order_manager_tbl AS o
		      WHERE 1 = 1
		
		      GROUP BY YEAR, MONTH, item_code, customer_code
		
		      ) AS pp
		
		      WHERE 1 = 1
		
		      AND YEAR = g.year
		      AND MONTH = g.month
      	<if test="customer_code != null and '' != customer_code">
			AND customer_code  = #{customer_code}
		</if>



     	<if test="customer_integration_code != null and '' != customer_integration_code">
			AND customer_code in (
			
			SELECT customer_code
			FROM customer_tbl
			WHERE 1 = 1 
			AND del_yn = 'N'
			AND customer_integration_code = #{customer_integration_code} 
			) 
		</if>
      GROUP BY YEAR
      ),0) as ju_price,
       IFNULL((
    	 SELECT 
				(SUM(IFNULL(order_price,0)) - SUM(IFNULL(delivery_price,0)) ) as no_price
				
				FROM		
				(
				SELECT 
				concat(YEAR(o.delivery_date)) AS YEAR,
				concat(month(o.delivery_date)) AS month,
				item_code, item_nm, menge, unit_price,
				(IFNULL(menge,0)*IFNULL(unit_price,0)) AS order_price,
				 customer_code, customer_nm, land,
	
				(
					SELECT SUM(dt.delivery_menge * dot.unit_price)
					FROM delivery_tbl AS dt
					LEFT JOIN delivery_order_tbl AS dot
					ON dt.delivery_num = dot.delivery_num
					
					WHERE dot.order_num = o.order_num
					AND dot.item_code = o.item_code
					AND dot.del_yn = 'N'
				    AND dt.del_yn = 'N'
					
				) AS delivery_price
				FROM order_manager_tbl AS o
				
				WHERE 1 = 1 
				
				      	
				) AS pp
	      
	         WHERE 1 = 1

      AND YEAR = g.year
      AND MONTH = g.month

		<if test="customer_code != null and '' != customer_code">
			AND customer_code  = #{customer_code}
		</if>
		
		<if test="customer_integration_code != null and '' != customer_integration_code">
			AND customer_code in (
			
			SELECT customer_code
			FROM customer_tbl
			WHERE 1 = 1 
			AND del_yn = 'N'
			AND customer_integration_code = #{customer_integration_code} 
			) 
		</if>

      GROUP BY YEAR
      ),0) as no_price,
	CASE
		WHEN (g.month = '1')
		THEN
		IFNULL((
		SELECT 

				(SUM(IFNULL(order_price,0)) - SUM(IFNULL(delivery_price,0)) )  as no_price
				
				FROM		
				(
				SELECT 
				concat(YEAR(o.delivery_date)) AS YEAR,
				concat(month(o.delivery_date)) AS month,
				item_code, item_nm, menge, unit_price,
				(IFNULL(menge,0)*IFNULL(unit_price,0)) AS order_price,
				 customer_code, customer_nm, land,
	
				(
					SELECT SUM(dt.delivery_menge * dot.unit_price)
					FROM delivery_tbl AS dt
					LEFT JOIN delivery_order_tbl AS dot
					ON dt.delivery_num = dot.delivery_num
					
					WHERE dot.order_num = o.order_num
					AND dot.item_code = o.item_code
					AND dot.del_yn = 'N'
					AND dt.del_yn = 'N'
					
				) AS delivery_price
				FROM order_manager_tbl AS o
				
				WHERE 1 = 1 
				
				      	
				) AS pp
	      
	         WHERE 1 = 1
     	  	 AND YEAR <![CDATA[ < ]]> #{year}
	          	<if test="customer_code != null and '' != customer_code">
				AND customer_code  = #{customer_code}
				</if>
			
				<if test="customer_integration_code != null and '' != customer_integration_code">
				AND customer_code in (
				
				SELECT customer_code
				FROM customer_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND customer_integration_code = #{customer_integration_code} 
				) 
				</if>
		
		
		),0) 
		ELSE 0
		END AS prev_no_price,
      success_status, 
        IFNULL(( 
           SELECT 
         SUM(IFNULL(goal,0)) as goal
         FROM kpi_customer_goal_info_tbl
         WHERE 1 = 1
         
        <if test="customer_code != null and '' != customer_code">
			AND CODE  = #{customer_code}
		</if>
		
		<if test="customer_integration_code != null and '' != customer_integration_code">
			AND CODE in (
			
			SELECT customer_code
			FROM customer_tbl
			WHERE 1 = 1 
			AND del_yn = 'N'
			AND customer_integration_code = #{customer_integration_code} 
			) 
		</if>

         AND YEAR = g.year
         AND MONTH = g.month
      
      ),0) AS goal
      FROM month_tbl AS g
      LEFT JOIN 
      (
      SELECT
      concat(YEAR(dt.delivery_date)) AS YEAR,
      concat(month(dt.delivery_date)) AS month,
      dt.delivery_num, dt.delivery_menge,
      dt.delivery_date,
      dot.order_num,
      dot.item_code, dot.item_nm,
      dot.customer_code, dot.customer_nm, dot.land,
      dot.unit_price,
      dot.menge,
      SUM(IFNULL(dot.unit_price,0) * IFNULL(dt.delivery_menge,0)) AS sum_price,
      dot.success_status


      FROM delivery_tbl AS dt
      LEFT JOIN delivery_order_tbl AS dot
      ON dt.delivery_num = dot.delivery_num

      WHERE 1 = 1
      AND dt.del_yn = 'N'
      AND dot.del_yn = 'N'
		      
		<if test="customer_code != null and '' != customer_code">
			AND dot.customer_code = #{customer_code}
		</if>
		
		<if test="customer_integration_code != null and '' != customer_integration_code">
			AND dot.customer_code in (
			
			SELECT customer_code
			FROM customer_tbl
			WHERE 1 = 1 
			AND del_yn = 'N'
			AND customer_integration_code = #{customer_integration_code} 
			) 
		</if>

      GROUP BY YEAR, month
      ) AS pp
      ON pp.year = g.year
      AND pp.month = g.month

      WHERE 1 = 1
      
 	  <if test="year != null and '' != year">
			AND g.year = #{year}
		</if>
      GROUP BY YEAR,month
      
<!--       ORDER BY g.year*1, g.month*1 asc -->
	</select>
	
	
	<select id="selectCustomerIntergration" parameterType="SYCustomerVo" resultType="SYCustomerVo"> 
		SELECT customer_integration_code,customer_code,customer_integration_nm
		FROM customer_tbl
		WHERE 1 = 1 
		AND del_yn = 'N'
	
		<if test="customer_integration_code !=null and !''.equals( customer_integration_code ) ">
			AND customer_integration_code = #{customer_integration_code} 
			</if>
		GROUP BY customer_integration_code
		
	</select>


	<select id="selectSalesGraph" parameterType="SYKPI_SalesVo"
		resultType="SYKPI_SalesVo">
		SELECT

		YEAR, MONTH, customer_code, customer_nm, sum_price

		FROM
		(

		(
		SELECT

		YEAR, MONTH, customer_code, customer_nm, SUM(sum_price) AS sum_price

		FROM (

		SELECT

		concat(YEAR(dt.delivery_date)) AS YEAR,
		concat(month(dt.delivery_date)) AS month,
		dt.delivery_num, dt.delivery_menge,
		dt.delivery_date,
		dot.order_num,
		dot.item_code, dot.item_nm,
		dot.customer_code, dot.customer_nm, dot.land,
		dot.unit_price,
		dot.menge,
		SUM(IFNULL(dot.unit_price,0) * IFNULL(dt.delivery_menge,0)) AS sum_price,
		dot.success_status

		FROM delivery_tbl AS dt
		LEFT JOIN delivery_order_tbl AS dot
		ON dt.delivery_num = dot.delivery_num

		WHERE 1 = 1
		AND dt.del_yn = 'N'
		AND dot.del_yn = 'N'

		GROUP BY YEAR, MONTH, customer_code

		) AS pp

		WHERE 1 = 1
		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="customer_integration_code != null and '' != customer_integration_code">
		AND 
			(
				SELECT customer_integration_code
				FROM customer_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND customer_code = pp.customer_code 
				LIMIT 1
			
			) = #{customer_integration_code}
		</if>
		<if test="customer_code != null and '' != customer_code">
			AND customer_code = #{customer_code}
		</if>


		GROUP BY YEAR, customer_code
		ORDER BY sum_price DESC
		LIMIT 5
		)
		UNION

		SELECT

		YEAR, MONTH, 'ETC' as customer_code, '기타' as customer_nm, SUM(sum_price)

		FROM (

		SELECT

		YEAR, MONTH, customer_code, customer_nm, SUM(sum_price) AS sum_price

		FROM (

		SELECT

		concat(YEAR(dt.delivery_date)) AS YEAR,
		concat(month(dt.delivery_date)) AS month,
		dt.delivery_num, dt.delivery_menge,
		dt.delivery_date,
		dot.order_num,
		dot.item_code, dot.item_nm,
		dot.customer_code, dot.customer_nm, dot.land,
		dot.unit_price,
		dot.menge,
		SUM(IFNULL(dot.unit_price,0) * IFNULL(dt.delivery_menge,0)) AS sum_price,
		dot.success_status

		FROM delivery_tbl AS dt
		LEFT JOIN delivery_order_tbl AS dot
		ON dt.delivery_num = dot.delivery_num

		WHERE 1 = 1
		AND dt.del_yn = 'N'
		AND dot.del_yn = 'N'

		GROUP BY YEAR, MONTH, customer_code

		) AS pp

		WHERE 1 = 1
		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>

		<if test="customer_integration_code != null and '' != customer_integration_code">
		AND 
			(
				SELECT customer_integration_code
				FROM customer_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND customer_code = pp.customer_code 
				LIMIT 1
			
			) = #{customer_integration_code}
		</if>
		<if test="customer_code != null and '' != customer_code">
			AND customer_code = #{customer_code}
		</if>

		GROUP BY YEAR ,customer_code
		ORDER BY sum_price DESC

		LIMIT 5 , 18446744073709551615
		) AS ppp
		) AS pppp

	</select>

	<select id="selectSalesGraph_no" parameterType="SYKPI_SalesVo"
		resultType="SYKPI_SalesVo">

		SELECT

		YEAR, MONTH, customer_code, customer_nm, sum_price

		FROM
		(

		(
		SELECT

		YEAR, MONTH, customer_code, customer_nm, (SUM(IFNULL(order_price,0)) - SUM(IFNULL(delivery_price,0)) ) AS sum_price

		FROM (

		SELECT 
			concat(YEAR(o.delivery_date)) AS year,
			concat(month(o.delivery_date)) AS month,
			order_num,
			item_code, item_nm, menge, unit_price,
			(menge*unit_price) AS order_price,
			 customer_code, customer_nm, land,
			
			
			(
				SELECT SUM(dt.delivery_menge * dot.unit_price)
				FROM delivery_tbl AS dt
				LEFT JOIN delivery_order_tbl AS dot
				ON dt.delivery_num = dot.delivery_num
				
				WHERE dot.order_num = o.order_num
				AND dot.item_code = o.item_code
				AND dot.del_yn = 'N'
				AND dt.del_yn = 'N'
				
			) AS delivery_price
			FROM order_manager_tbl AS o
			
			WHERE 1 = 1 
		) AS pp

		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>

		<if test="customer_integration_code != null and '' != customer_integration_code">
		AND 
			(
				SELECT customer_integration_code
				FROM customer_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND customer_code = pp.customer_code 
				LIMIT 1
			
			) = #{customer_integration_code}
		</if>
		<if test="customer_code != null and '' != customer_code">
			AND customer_code = #{customer_code}
		</if>



		GROUP BY YEAR, customer_code
		ORDER BY sum_price DESC
		LIMIT 5
		)
		UNION

		SELECT

		YEAR, MONTH, 'ETC' as customer_code, '기타' as customer_nm, SUM(sum_price)

		FROM (

		SELECT

		YEAR, MONTH, customer_code, customer_nm, (SUM(IFNULL(order_price,0)) - SUM(IFNULL(delivery_price,0)) ) AS sum_price

		FROM (

		SELECT 
			concat(YEAR(o.delivery_date)) AS year,
			concat(month(o.delivery_date)) AS month,
			order_num,
			item_code, item_nm, menge, unit_price,
			(menge*unit_price) AS order_price,
			 customer_code, customer_nm, land,
			
			
			(
				SELECT SUM(dt.delivery_menge * dot.unit_price)
				FROM delivery_tbl AS dt
				LEFT JOIN delivery_order_tbl AS dot
				ON dt.delivery_num = dot.delivery_num
				
				WHERE dot.order_num = o.order_num
				AND dot.item_code = o.item_code
				AND dot.del_yn = 'N'
				AND dt.del_yn = 'N'
				
			) AS delivery_price
			FROM order_manager_tbl AS o
			
			WHERE 1 = 1 
		) AS pp

		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="customer_integration_code != null and '' != customer_integration_code">
		AND 
			(
				SELECT customer_integration_code
				FROM customer_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND customer_code = pp.customer_code 
				LIMIT 1
			
			) = #{customer_integration_code}
		</if>
		<if test="customer_code != null and '' != customer_code">
			AND customer_code = #{customer_code}
		</if>



		GROUP BY YEAR ,customer_code
		ORDER BY sum_price DESC

		LIMIT 5 , 18446744073709551615
		) AS ppp
		) AS pppp

	</select>

	<select id="selectSalesGraph_ju" parameterType="SYKPI_SalesVo"
		resultType="SYKPI_SalesVo">
		SELECT

		YEAR, MONTH, customer_code, customer_nm, sum_price

		FROM
		(
		(
		SELECT

		YEAR, MONTH, customer_code, customer_nm, SUM(sum_price) AS sum_price

		FROM (

		SELECT

		concat(YEAR(o.delivery_date)) AS YEAR,
		concat(month(o.delivery_date)) AS month,
		o.order_num,
		o.item_code, o.item_nm,
		o.customer_code, o.customer_nm,
		SUM(o.total_price) AS sum_price

		FROM order_manager_tbl AS o

		WHERE 1 = 1

		GROUP BY YEAR, MONTH, customer_code

		) AS pp

		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="customer_integration_code != null and '' != customer_integration_code">
		AND 
			(
				SELECT customer_integration_code
				FROM customer_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND customer_code = pp.customer_code 
				LIMIT 1
			
			) = #{customer_integration_code}
		</if>
		<if test="customer_code != null and '' != customer_code">
			AND customer_code = #{customer_code}
		</if>

		GROUP BY YEAR, customer_code
		ORDER BY sum_price DESC
		LIMIT 5

		)
		UNION


		SELECT

		YEAR, MONTH, 'ETC' as customer_code, '기타' as customer_nm, SUM(sum_price)

		FROM (
		SELECT

		YEAR, MONTH, customer_code, customer_nm, SUM(sum_price) AS sum_price

		FROM (

		SELECT

		concat(YEAR(o.delivery_date)) AS YEAR,
		concat(month(o.delivery_date)) AS month,
		o.order_num,
		o.item_code, o.item_nm,
		o.customer_code, o.customer_nm,
		o.total_price AS sum_price

		FROM order_manager_tbl AS o

		WHERE 1 = 1

		GROUP BY YEAR, MONTH, customer_code

		) AS pp

		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="customer_integration_code != null and '' != customer_integration_code">
		AND 
			(
				SELECT customer_integration_code
				FROM customer_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND customer_code = pp.customer_code 
				LIMIT 1
			
			) = #{customer_integration_code}
		</if>
		<if test="customer_code != null and '' != customer_code">
			AND customer_code = #{customer_code}
		</if>

		GROUP BY YEAR, customer_code
		ORDER BY sum_price DESC
		LIMIT 5 , 18446744073709551615
		) AS ppp
		) AS pppp



	</select>


	<select id="selectSalesGrid2" parameterType="SYKPI_SalesVo"
		resultType="SYKPI_SalesVo">

		SELECT

		YEAR, MONTH, delivery_num, delivery_menge,
		delivery_date, order_num, item_code, item_nm,
		customer_code, customer_nm, land, unit_price,
		menge, SUM(sum_price) as sum_price, success_status
		FROM (

		SELECT

		concat(YEAR(dt.delivery_date)) AS YEAR,
		concat(month(dt.delivery_date)) AS month,
		dt.delivery_num, dt.delivery_menge,
		dt.delivery_date,
		dot.order_num,
		dot.item_code, dot.item_nm,
		dot.customer_code, dot.customer_nm, dot.land,
		dot.unit_price,
		dot.menge,
		SUM(IFNULL(dot.unit_price,0) * IFNULL(dt.delivery_menge,0)) AS sum_price,
		dot.success_status

		FROM delivery_tbl AS dt
		LEFT JOIN delivery_order_tbl AS dot
		ON dt.delivery_num = dot.delivery_num

		WHERE 1 = 1
		AND dt.del_yn = 'N'
		AND dot.del_yn = 'N'

		GROUP BY YEAR, MONTH, item_code, customer_code

		) AS pp

		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="''.equals( customer_code )">

		</if>
		<if test="customer_integration_code != null and '' != customer_integration_code">
		AND 
			(
				SELECT customer_integration_code
				FROM customer_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND customer_code = pp.customer_code 
				LIMIT 1
			
			) = #{customer_integration_code}
		</if>
		<if test="customer_code != null and !'ETC'.equals( customer_code ) and !''.equals( customer_code )">
			AND customer_code = #{customer_code}
		</if>
		<if test="customer_code != null and 'ETC'.equals( customer_code )">
			AND customer_code NOT IN (

			SELECT
			customer_code
			FROM (

			SELECT
			concat(YEAR(dt.delivery_date)) AS YEAR,
			concat(month(dt.delivery_date)) AS month,
			dot.customer_code,

			SUM(IFNULL(dot.unit_price,0) * IFNULL(dt.delivery_menge,0)) AS sum_price
			FROM delivery_tbl AS dt
			LEFT JOIN delivery_order_tbl AS dot
			ON dt.delivery_num = dot.delivery_num

			WHERE 1 = 1
			AND dt.del_yn = 'N'
			AND dot.del_yn = 'N'
			<if test="year != null and '' != year">
				AND concat(YEAR(dt.delivery_date)) = #{year}
			</if>

			<if test="month != null and '' != month">
				AND concat(month(dt.delivery_date)) = #{month}
			</if>
			GROUP BY YEAR, customer_code
			ORDER BY SUM(IFNULL(dot.unit_price,0) * IFNULL(dt.delivery_menge,0)) DESC
			LIMIT 5
			) AS pp


			)
		</if>
		GROUP BY YEAR, customer_code, item_code
		ORDER BY sum_price DESC

	</select>


	<select id="selectSalesGrid2_no" parameterType="SYKPI_SalesVo"
		resultType="SYKPI_SalesVo">


	SELECT * FROM
	
	
	(
		SELECT

		YEAR, MONTH,
		order_num, item_code, item_nm,
		customer_code, customer_nm,
		(SUM(IFNULL(order_price,0)) - SUM(IFNULL(delivery_price,0))) as sum_price
		FROM (

		SELECT 
			concat(YEAR(o.delivery_date)) AS YEAR,
			concat(month(o.delivery_date)) AS month,
			order_num,
			item_code, item_nm, menge, unit_price,
			SUM((menge*unit_price)) AS order_price,
			 customer_code, customer_nm, land,

			(
				SELECT SUM(dt.delivery_menge * dot.unit_price)
				FROM delivery_tbl AS dt
				LEFT JOIN delivery_order_tbl AS dot
				ON dt.delivery_num = dot.delivery_num
				
				WHERE dot.order_num = o.order_num
				AND dot.item_code = o.item_code
				AND dot.del_yn = 'N'
				AND dt.del_yn = 'N'
				
			) AS delivery_price
		FROM order_manager_tbl AS o
		
		WHERE 1 = 1 
		GROUP BY YEAR, MONTH, item_code, customer_code, order_num

		) AS pp

		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="''.equals( customer_code )">

		</if>
		<if test="customer_integration_code != null and '' != customer_integration_code">
		AND 
			(
				SELECT customer_integration_code
				FROM customer_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND customer_code = pp.customer_code 
				LIMIT 1
			
			) = #{customer_integration_code}
		</if>
		<if test="customer_code != null and !'ETC'.equals( customer_code ) and !''.equals( customer_code )">
			AND customer_code = #{customer_code}
		</if>
		<if test="customer_code != null and 'ETC'.equals( customer_code )">
			AND customer_code NOT IN (

			SELECT
			customer_code
			FROM (

			SELECT 
			concat(YEAR(o.delivery_date)) AS YEAR,
			concat(month(o.delivery_date)) AS month,
			order_num,
			item_code, item_nm, menge, unit_price,
			SUM((menge*unit_price)) AS order_price,
			 customer_code, customer_nm, land,

			(
				SELECT SUM(dt.delivery_menge * dot.unit_price)
				FROM delivery_tbl AS dt
				LEFT JOIN delivery_order_tbl AS dot
				ON dt.delivery_num = dot.delivery_num
				
				WHERE dot.order_num = o.order_num
				AND dot.item_code = o.item_code
				AND dot.del_yn = 'N'
				AND dt.del_yn = 'N'
				
			) AS delivery_price
			FROM order_manager_tbl AS o
			
			WHERE 1 = 1 
		
			<if test="year != null and '' != year">
				AND concat(YEAR(o.delivery_date)) = #{year}
			</if>

			<if test="month != null and '' != month">
				AND concat(month(o.delivery_date)) = #{month}
			</if>
			GROUP BY concat(YEAR(o.delivery_date)), customer_code
			ORDER BY SUM((menge*unit_price)) DESC
			LIMIT 5
			) AS pp


			)
		</if>
		GROUP BY YEAR, customer_code, item_code
		ORDER BY sum_price DESC

	) as ppp
	WHERE sum_price > 0
	</select>


	<select id="selectSalesGrid2_ju" parameterType="SYKPI_SalesVo"
		resultType="SYKPI_SalesVo">

		SELECT

		YEAR, MONTH,
		order_num, item_code, item_nm,
		customer_code, customer_nm, SUM(sum_price) as sum_price
		FROM (

		SELECT

		concat(YEAR(o.delivery_date)) AS YEAR,
		concat(month(o.delivery_date)) AS month,
		o.order_num,
		o.item_code, o.item_nm,
		o.customer_code, o.customer_nm,
		SUM(o.total_price) AS sum_price

		FROM order_manager_tbl AS o
		WHERE 1 = 1

		GROUP BY YEAR, MONTH, item_code, customer_code

		) AS pp

		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>
		<if test="''.equals( customer_code )">

		</if>
		<if test="customer_integration_code != null and '' != customer_integration_code">
		AND 
			(
				SELECT customer_integration_code
				FROM customer_tbl
				WHERE 1 = 1 
				AND del_yn = 'N'
				AND customer_code = pp.customer_code 
				LIMIT 1
			
			) = #{customer_integration_code}
		</if>
		<if test="customer_code != null and !'ETC'.equals( customer_code ) and !''.equals( customer_code )">
			AND customer_code = #{customer_code}
		</if>
		<if test="customer_code != null and 'ETC'.equals( customer_code )">
			AND customer_code NOT IN (

			SELECT
			customer_code
			FROM (

			SELECT
			customer_code, year, month
			FROM (

			SELECT

			o.customer_code,
			SUM(o.total_price) AS sum_price,
			concat(YEAR(o.delivery_date)) as year,
			concat(MONTH(o.delivery_date)) as month

			FROM order_manager_tbl AS o

			WHERE 1 = 1

			GROUP BY concat(YEAR(o.delivery_date)) , concat(MONTH(o.delivery_date)) , customer_code

			) AS pp

			WHERE 1 = 1


			<if test="year != null and '' != year">
				AND year = #{year}
			</if>

			<if test="month != null and '' != month">
				AND month = #{month}
			</if>
			GROUP BY year, customer_code
			ORDER BY sum_price DESC
			LIMIT 5
			) AS pp

			)
		</if>

		GROUP BY YEAR, customer_code, item_code
		ORDER BY sum_price DESC


	</select>

	<select id="selectOperation" parameterType="SYKPI_OperationVo"
		resultType="SYKPI_OperationVo">

		SELECT

		YEAR,MONTH,

		machine_code, machine_nm,
		ROUND(AVG(((work_time - unwork_time) / today_time) *
		100),2) AS per


		FROM
		(
		SELECT
		mw.year,mw.month,
		mw.product_po, mw.STATUS, mw.routing_code, mw.real_seq,
		mw.machine_code, mw.machine_nm,
		mw.prod_str_time, mw.prod_end_time,
		mw.work_str_time, mw.work_end_time,
		TIME_TO_SEC(timediff(date_format(mw.work_end_time,'%Y-%m-%d
		%H:%i:%s'), date_format(mw.work_str_time,'%Y-%m-%d %H:%i:%s'))) AS
		work_time,
		muw.unwork_str_time, muw.unwork_end_time,
		TIME_TO_SEC(timediff(date_format(muw.unwork_end_time,'%Y-%m-%d
		%H:%i:%s'), date_format(muw.unwork_str_time,'%Y-%m-%d %H:%i:%s'))) AS
		unwork_time,
		mw.today_str_time, mw.today_end_time,
		TIME_TO_SEC(timediff(date_format(mw.today_end_time,'%Y-%m-%d
		%H:%i:%s'), date_format(mw.today_str_time,'%Y-%m-%d %H:%i:%s'))) AS
		today_time


		FROM view_machine_work AS mw
		LEFT JOIN view_machine_unwork AS muw
		ON mw.product_po = muw.product_po
		AND mw.routing_code = muw.routing_code

		) AS pp
		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND year = #{year}
		</if>

		<if test="month != null and '' != month">
			AND month = #{month}
		</if>

		<if test="machine_class_code!=null and !''.equals(machine_class_code) ">
			And machine_code IN(SELECT machine_code FROM
			machine_master WHERE machine_class_code = #{machine_class_code} )
		</if>

		<if test="machine_code != null and '' != machine_code">
			AND machine_code = #{machine_code}
		</if>





		GROUP BY YEAR, MONTH , machine_code

	</select>

	<select id="selectOperation_2" parameterType="SYKPI_OperationVo"
		resultType="SYKPI_OperationVo">


		SELECT

		gb,
		product_po,
		item_code, item_nm,
		machine_code,
		work_str_time,
		work_end_time,
		change_str_time,
		origin_end_time,
		TIME_TO_SEC(timediff(date_format(work_end_time,'%Y-%m-%d %H:%i:%s'), date_format(work_str_time,'%Y-%m-%d %H:%i:%s'))) AS
		work_time_sec,
		CONCAT(ROUND(TIME_TO_SEC(timediff(date_format(work_end_time,'%Y-%m-%d
		%H:%i:%s'), date_format(work_str_time,'%Y-%m-%d
		%H:%i:%s')))/3600,2),'시간') AS work_time_hour,
		today_str_time,
		today_end_time,
		TIME_TO_SEC(timediff(date_format(today_end_time,'%Y-%m-%d %H:%i:%s'), date_format(today_str_time,'%Y-%m-%d %H:%i:%s'))) AS
		today_time_sec,
		CONCAT(ROUND(TIME_TO_SEC(timediff(date_format(today_end_time,'%Y-%m-%d
		%H:%i:%s'), date_format(today_str_time,'%Y-%m-%d
		%H:%i:%s')))/3600,2),'시간') AS today_time_hour,

		ROUND(((
		TIME_TO_SEC(timediff(date_format(work_end_time,'%Y-%m-%d %H:%i:%s'), date_format(work_str_time,'%Y-%m-%d %H:%i:%s')))
		/TIME_TO_SEC(timediff(date_format(today_end_time,'%Y-%m-%d %H:%i:%s'),
		date_format(today_str_time,'%Y-%m-%d %H:%i:%s')))
		)*100),2) AS per,


		prod_menge, prod_fail_menge

		FROM
		(

		SELECT

		gb,
		product_po,
		item_code, item_nm,
		machine_code,
		work_str_time,
		work_end_time,
		change_str_time,
		origin_end_time,
		(
		SELECT work_str_time
		FROM view_machine_process_row
		WHERE machine_code = pr.machine_code
		AND date_format(work_str_time,'%Y-%m-%d') =
		date_format(pr.work_str_time,'%Y-%m-%d')
		ORDER BY work_str_time
		LIMIT 1
		) AS today_str_time,

		IFNULL((
		SELECT work_end_time
		FROM view_machine_process_row
		WHERE machine_code = pr.machine_code
		AND date_format(work_end_time,'%Y-%m-%d') =
		date_format(pr.work_str_time,'%Y-%m-%d')
		ORDER BY work_end_time desc
		LIMIT 1
		), date_format(work_str_time,'%Y-%m-%d 17:30:00')) AS today_end_time,

		prod_menge, prod_fail_menge

		FROM view_machine_process_row AS pr
		) AS pp

		WHERE 1 = 1
		<if test="gb != null and !''.equals(gb) ">
			AND gb = #{gb}
		</if>

		<if test="work_str_time != null and !''.equals( work_str_time ) ">
			AND (
			date_format(work_str_time, '%Y-%m-%d') BETWEEN left(#{work_str_time}, 10) AND
			right(#{work_str_time}, 10)
			OR
			date_format(work_end_time, '%Y-%m-%d') BETWEEN left(#{work_str_time}, 10) AND
			right(#{work_str_time}, 10)
			)
		</if>

		<if test="product_po != null and !''.equals(product_po) ">
			AND product_po = #{product_po}
		</if>

		<if test="machine_code != null and !''.equals(machine_code) ">
			AND machine_code = #{machine_code}
		</if>

		<if test="item_code != null and !''.equals(item_code) ">
			AND item_code = #{item_code}
		</if>

		<if test="item_nm != null and !''.equals(item_nm) ">
			AND item_nm = #{item_nm}
		</if>

		ORDER BY machine_code, work_str_time

	</select>



	<select id="selectOperation_real" parameterType="SYProductOperStatusVO"
		resultType="SYProductOperStatusVO">


		SELECT    
         gb,
         product_po,
         item_code, item_nm,
         routing_code,
         (
         	SELECT routing_nm
         	FROM product_operation_tbl
         	WHERE product_po = pp.product_po
         
         	AND routing_code = pp.routing_code
         	LIMIT 1
         ) AS routing_nm,
         
         machine_code,
         date_format(work_str_time,'%Y-%m-%d %H:%i:%s') as work_str_time, 
         work_end_time,
         TIME_TO_SEC(timediff(date_format(work_end_time,'%Y-%m-%d %H:%i:%s'), date_format(work_str_time,'%Y-%m-%d %H:%i:%s'))) AS work_time_sec,
  
         CONCAT(ROUND((TIME_TO_SEC(timediff(date_format(work_end_time,'%Y-%m-%d %H:%i:%s'), 
         date_format(work_str_time,'%Y-%m-%d %H:%i:%s')))/3600),2),'시간') 
         AS work_time,
         prod_menge, prod_fail_menge
      
      FROM (
      	SELECT
      	   'PROCESS' AS gb,
            product_po,
            item_code, item_nm,
            STATUS, machine_code,
            routing_code,

            work_str_time,
				work_end_time, 
				 CASE
            WHEN (
	        		date_format(work_end_time, '%Y-%m-%d') =	date_format(origin_end_time, '%Y-%m-%d') 
		       )
		       THEN prod_menge
				 ELSE 0
				 END prod_menge,
				 
				CASE
            WHEN (
	        	  date_format(work_end_time, '%Y-%m-%d') =	date_format(origin_end_time, '%Y-%m-%d') 
		       )
		       THEN prod_fail_menge
				 ELSE 0
				 END prod_fail_menge   
			FROM (
	         SELECT 
	            'PROCESS' AS gb,
	            po.product_po,
	            p.item_code, p.item_nm,
	            po.STATUS, po.machine_code,
	            po.routing_code,
	            po.prod_end_time as origin_end_time,
	            po.prod_str_time as work_str_time, 
	            CASE 
	            WHEN ( (SELECT unprod_str_time FROM product_unoperation_tbl 
	            WHERE product_po = po.product_po AND routing_code = po.routing_code LIMIT 1) IS NOT NULL )
	            THEN (SELECT unprod_str_time FROM product_unoperation_tbl 
	            WHERE product_po = po.product_po AND routing_code = po.routing_code LIMIT 1)
	            
	            ELSE IFNULL(po.prod_end_time,date_format(now(),'%Y-%m-%d %H:%i:%s')) 
	            END as work_end_time,
	            po.prod_menge,
	            po.prod_fail_menge
	            
	         
	         FROM product_operation_tbl AS po
	         LEFT JOIN product_tbl AS p
	         ON po.product_po = p.product_po
	         
	         WHERE 1 = 1 
	         AND p.del_yn = 'N'
	         AND po.del_yn = 'N'
	         AND po.STATUS != 'n'
	         AND po.machine_code IS NOT NULL
	         AND po.machine_code != ''
	      ) as pp
 
         UNION
         
         SELECT 
         
            'WAITING' as gb,
            '' as product_po, 
            '' as item_code, '' as item_nm,
            '' as STATUS, machine_code,
            routing_code,
            work_str_time,
            CASE
            WHEN ( work_end_time <![CDATA[<=]]> unprod_end_time ) 
            THEN work_end_time
            ELSE unprod_end_time
            END AS work_end_time,
            prod_menge, prod_fail_menge
 
 			FROM (
	 				SELECT 
	         
	            'WAITING' AS gb,
	            po.product_po,
	            p.item_code, p.item_nm,
	            po.STATUS, po.machine_code,
	            po.routing_code,
	            po.prod_end_time AS work_str_time,
	            
	            IFNULL((
	               SELECT prod_str_time
	               FROM product_operation_tbl
	               WHERE 1 = 1
	               AND machine_code = po.machine_code
	               AND prod_str_time >= po.prod_end_time
	               ORDER BY prod_str_time asc
	               LIMIT 1
	            ),date_format(now(),'%Y-%m-%d %H:%i:%s')) AS work_end_time,
	            
	            IFNULL((
	               SELECT in_puo.unprod_end_time
	               FROM product_unoperation_tbl AS in_puo force index(unoper_new_index)
	            	LEFT JOIN product_operation_tbl AS in_po force index(oper_new_index)
	            	ON in_puo.product_po = in_po.product_po
	               WHERE 1 = 1
	  
	               AND in_puo.unprod_end_time >= po.prod_end_time
	             	AND in_po.machine_code = po.machine_code
	               ORDER BY in_puo.unprod_str_time asc
	               LIMIT 1
	            ),date_format(now(),'%Y-%m-%d %H:%i:%s')) AS unprod_end_time,
	             
	            0 as prod_menge, 0 as prod_fail_menge
	            
	         FROM product_operation_tbl AS po force index(oper_new_index)
	         LEFT JOIN product_tbl AS p force index(idex_01)
	         ON po.product_po = p.product_po
	         
	         
	         WHERE 1 = 1 
	         AND p.del_yn = 'N'
	         AND po.del_yn = 'N'
	         AND po.STATUS != 'n'
	         AND po.machine_code IS NOT NULL
	         AND po.machine_code != ''
	         AND po.prod_end_time IS NOT NULL
			) AS ii 
   
         UNION
         
         SELECT 

            'UNPROCESS' AS gb,
            product_po,
            item_code, item_nm,
            'u' AS STATUS,
            machine_code,
            routing_code,
            unprod_str_time AS work_str_time,
            CASE 
            WHEN ( next_work_str_time IS NULL)
            THEN unprod_end_time
            WHEN (next_work_str_time IS NOT NULL and date_format(unprod_end_time,'%Y-%m-%d %H:%i:%s') <![CDATA[<=]]> date_format(next_work_str_time,'%Y-%m-%d %H:%i:%s') )
            THEN unprod_end_time
            ELSE next_work_str_time
            END as work_end_time,
          
           0 AS prod_menge,
            0 AS prod_fail_menge
         FROM (
            SELECT 
               pu.product_po, 
               p.item_code, p.item_nm,
               pu.routing_code,
               (
                  SELECT machine_code
                  FROM product_operation_tbl
                  WHERE del_yn = 'N'
                  AND product_po = pu.product_po
                  AND routing_code = pu.routing_code
               ) AS machine_code,
               pu.unprod_str_time, pu.unprod_end_time,
               
               (
               	SELECT prod_str_time
               	FROM product_operation_tbl
               	WHERE del_yn = 'N'
						AND machine_code = (
							                  SELECT machine_code
							                  FROM product_operation_tbl
							                  WHERE del_yn = 'N'
							                  AND product_po = pu.product_po
							                  AND routing_code = pu.routing_code
							               )
						AND date_format(prod_str_time,'%Y-%m-%d %H:%i:%s') >= date_format(pu.unprod_str_time,'%Y-%m-%d %H:%i:%s')
						ORDER BY prod_str_time asc
						LIMIT 1 
               	
               ) as next_work_str_time
               
            FROM product_unoperation_tbl AS pu
            LEFT JOIN product_tbl AS p
            ON pu.product_po = p.product_po
            WHERE 1 = 1 
            AND pu.del_yn = 'N'
            AND p.del_yn = 'N'
            AND TYPE = 'U'
         ) AS ii
         
         UNION 
         
         SELECT 

            'WAITING' AS gb,
            product_po,
            item_code, item_nm,
            'u' AS STATUS,
            machine_code,
            routing_code,
            unprod_str_time AS work_str_time,
           unprod_end_time as work_end_time,

           0 AS prod_menge,
            0 AS prod_fail_menge
         FROM (
            SELECT 
              'WAITING_HOLD' AS gb,
               pu.product_po, 
               p.item_code, p.item_nm,
               pu.routing_code,
               (
                  SELECT machine_code
                  FROM product_operation_tbl
                  WHERE del_yn = 'N'
                  AND product_po = pu.product_po
                  AND routing_code = pu.routing_code
               ) AS machine_code,
               pu.unprod_str_time,  IFNULL(pu.unprod_end_time, date_format(NOW(),'%Y-%m-%d %H:%i:%s')) as unprod_end_time,
               
               (
               	SELECT prod_str_time
               	FROM product_operation_tbl
               	WHERE del_yn = 'N'
						AND machine_code = (
							                  SELECT machine_code
							                  FROM product_operation_tbl
							                  WHERE del_yn = 'N'
							                  AND product_po = pu.product_po
							                  AND routing_code = pu.routing_code
							               )
						AND date_format(prod_str_time,'%Y-%m-%d %H:%i:%s') >= date_format(pu.unprod_str_time,'%Y-%m-%d %H:%i:%s')
						ORDER BY prod_str_time asc
						LIMIT 1 
               	
               ) as next_work_str_time
               
            FROM product_unoperation_tbl AS pu
            LEFT JOIN product_tbl AS p
            ON pu.product_po = p.product_po
            WHERE 1 = 1 
            AND pu.del_yn = 'N'
            AND p.del_yn = 'N'
            AND TYPE = 'WH'
         ) AS ii
         
         UNION 
         SELECT 

            'HOLD' AS gb,
            product_po,
            item_code, item_nm,
            'u' AS STATUS,
            machine_code,
            routing_code,
            unprod_str_time AS work_str_time,
            unprod_end_time as work_end_time,

           0 AS prod_menge,
            0 AS prod_fail_menge
         FROM (
            SELECT 
               pu.product_po, 
               p.item_code, p.item_nm,
               pu.routing_code,
               (
                  SELECT machine_code
                  FROM product_operation_tbl
                  WHERE del_yn = 'N'
                  AND product_po = pu.product_po
                  AND routing_code = pu.routing_code
               ) AS machine_code,
               pu.unprod_str_time, IFNULL(pu.unprod_end_time,date_format(now(),'%Y-%m-%d %H:%i:%s')) as unprod_end_time,
               
               (
               	SELECT prod_str_time
               	FROM product_operation_tbl
               	WHERE del_yn = 'N'
						AND machine_code = (
							                  SELECT machine_code
							                  FROM product_operation_tbl
							                  WHERE del_yn = 'N'
							                  AND product_po = pu.product_po
							                  AND routing_code = pu.routing_code
							               )
						AND date_format(prod_str_time,'%Y-%m-%d %H:%i:%s') >= date_format(pu.unprod_str_time,'%Y-%m-%d %H:%i:%s')
						ORDER BY prod_str_time asc
						LIMIT 1 
               	
               ) as next_work_str_time
               
            FROM product_unoperation_tbl AS pu
            LEFT JOIN product_tbl AS p
            ON pu.product_po = p.product_po
            WHERE 1 = 1 
            AND pu.del_yn = 'N'
            AND p.del_yn = 'N'
            AND TYPE = 'H'
         ) AS ii
         
         UNION 
         
         SELECT 
         
            'PROCESS' AS gb,
            product_po,
            item_code, item_nm,
            'p' AS STATUS,
            machine_code,
            routing_code,
            prod_str_time as work_str_time,
            
            CASE 
            WHEN (date_format(prod_end_time, '%Y-%m-%d %H:%i:%s') <![CDATA[<=]]> date_format(next_work_str_time, '%Y-%m-%d %H:%i:%s'))
            THEN prod_end_time
            
            WHEN (date_format(prod_end_time, '%Y-%m-%d %H:%i:%s') > date_format(next_work_str_time, '%Y-%m-%d %H:%i:%s'))
            THEN next_work_str_time
            ELSE prod_end_time
            END as work_end_time,
		
            IFNULL(( 
            SELECT prod_menge
            FROM product_operation_tbl
            WHERE product_po = ii.product_po
            AND routing_code = ii.routing_code
            AND (
	        		date_format(work_end_time, '%Y-%m-%d') = date_format(origin_end_time, '%Y-%m-%d')
		       )
            ),0) AS prod_menge,
            
            IFNULL(( 
            SELECT prod_fail_menge
            FROM product_operation_tbl
            WHERE product_po = ii.product_po
            AND routing_code = ii.routing_code
            AND date_format(work_end_time, '%Y-%m-%d') = date_format(origin_end_time, '%Y-%m-%d')
        			
		  
            ),0) AS prod_fail_menge
            
         FROM (   
            SELECT 
               pu.product_po, 
               p.item_code, p.item_nm,
               pu.routing_code,
               (
               	SELECT prod_end_time
               	FROM product_operation_tbl
               	where product_po = pu.product_po
                  AND routing_code = pu.routing_code
               
               ) as origin_end_time,
               (
                  SELECT machine_code
                  FROM product_operation_tbl
                  WHERE del_yn = 'N'
                  AND product_po = pu.product_po
                  AND routing_code = pu.routing_code
               ) AS machine_code,
               pu.unprod_end_time as prod_str_time, 
               
               CASE 
               WHEN ( (   
						SELECT unprod_str_time 
                  FROM product_unoperation_tbl
                  WHERE product_po = pu.product_po
                  AND routing_code = pu.routing_code
                  AND unoperation_seq*1 > pu.unoperation_seq*1
          
                  ORDER BY unoperation_seq 
                  LIMIT 1) IS NULL)
               THEN IFNULL((SELECT prod_end_time FROM product_operation_tbl 
                     WHERE product_po = pu.product_po AND routing_code = pu.routing_code),date_format(now(),'%Y-%m-%d %H:%i:%s'))
               
               ELSE 
               IFNULL((
                  SELECT unprod_str_time 
                  FROM product_unoperation_tbl
                  WHERE product_po = pu.product_po
                  AND routing_code = pu.routing_code
                  AND unoperation_seq*1 > pu.unoperation_seq*1
   
                  ORDER BY unoperation_seq 
                  LIMIT 1
               ),date_format(NOW(),'%Y-%m-%d %H:%i:%s'))
               END AS prod_end_time,
               
               (
               	SELECT prod_str_time
               	FROM product_operation_tbl
               	WHERE del_yn = 'N'
						AND machine_code = (
							                  SELECT machine_code
							                  FROM product_operation_tbl
							                  WHERE del_yn = 'N'
							                  AND product_po = pu.product_po
							                  AND routing_code = pu.routing_code
							               )
						AND date_format(prod_str_time,'%Y-%m-%d %H:%i:%s') >= date_format(pu.unprod_end_time,'%Y-%m-%d %H:%i:%s')
						ORDER BY prod_str_time asc
						LIMIT 1 
               	
               ) as next_work_str_time
            
            FROM product_unoperation_tbl AS pu
            LEFT JOIN product_tbl AS p
            ON pu.product_po = p.product_po
         
            WHERE 1 = 1 
            AND pu.del_yn = 'N'
            AND p.del_yn = 'N'
				
      		AND pu.TYPE != 'H'
            AND pu.unprod_end_time IS NOT NULL
         ) AS ii
         
         
         
         
         
      ) AS pp
      
      WHERE 1 = 1




	
		<if test="year != null and !''.equals( year )">
			AND year(work_end_time) = #{year}
		</if>
		
		<if test="month != null and !''.equals( month )">
			AND month(work_end_time) = #{month}
		</if>
		<if test="machine_class_code != null and !''.equals( machine_class_code )">
			AND machine_code in(
			SELECT machine_code
			FROM machine_master
			WHERE 1 = 1
			
			AND machine_class_code = #{machine_class_code}
		
			) 
	 	</if>
	 	
		<if test="machine_code != null and !''.equals( machine_code )">
		 	AND machine_code = #{machine_code}
	 	</if>
		ORDER BY machine_code, work_str_time , work_end_time

	</select>
	
	
	<!-- 1218 -->
	<select id="selectOperation_second" parameterType="SYProductOperStatusVO"
		resultType="SYGoalVo">
 SELECT * FROM (
		SELECT m.YEAR,m.MONTH, IFNULL(sum(g.goal)/(select count(goal) from kpi_machine_goal_info_tbl as g
			<if test="machine_class_code != null and !''.equals( machine_class_code )">
			where g.CODE 
			in(
				SELECT machine_code
				FROM machine_master
				WHERE 1 = 1
				
				AND machine_class_code = #{machine_class_code}
			
				)
			</if>
			
			<if test="machine_code != null and !''.equals( machine_code )">
			AND g.code = #{machine_code}
			</if>
			AND g.year =#{year} AND m.month =g.month
			)
			
			,0) AS goal FROM month_tbl AS m
			LEFT JOIN kpi_machine_goal_info_tbl AS g
			ON m.year = g.year
			AND m.month = g.month
			
			<if test="machine_class_code != null and !''.equals( machine_class_code )">
				AND g.CODE in(
				SELECT machine_code
				FROM machine_master
				WHERE 1 = 1
				
				AND machine_class_code = #{machine_class_code}
			
				) 
			 </if>
			 
			 <if test="machine_code != null and !''.equals( machine_code )">
			AND g.code = #{machine_code}
			</if>
			
			
			GROUP BY m.year, m.month
			ORDER BY m.month*1 asc
    ) c  WHERE c.year = #{year}
	</select>
	
	

	<select id="purchaseGrid" parameterType="SYKPI_PurchaseVo"
		resultType="SYKPI_PurchaseVo">


		SELECT

		account_code, account_nm,g.YEAR as year, g.MONTH as month,
		item_code, item_nm, item_type_code, item_type_nm,

		IFNULL(SUM(total_price),0) AS total_price, IFNULL(		(
			SELECT
				SUM(in_menge * unit_price) AS in_price
			FROM purchase_order_detail AS po
			WHERE del_yn = 'N'
			AND purchase_status IS NOT NULL	
			<if test="account_code != null and '' != account_code">
			AND (SELECT account_code FROM purchase_order_master WHERE purchase_order_num = po.purchase_order_num LIMIT 1) = #{account_code}
			</if>
			AND CONCAT(YEAR(purchase_end_date)) =  g.year
			AND CONCAT(MONTH(purchase_end_date)) = g.month

			
			GROUP BY YEAR(purchase_end_date), MONTH(purchase_end_date)
		
		
		),0) as in_price, IFNULL(SUM(no_price),0) AS no_price,		
		
		
			CASE
		WHEN (g.month = '1')
		THEN 
		(SELECT

	   IFNULL(SUM(no_price),0) AS no_price		
	

		FROM 

		(
			SELECT
			om.account_code, om.account_nm,
			CONCAT(YEAR(om.purchase_date)) AS YEAR,
			od.item_type_code,
			SUM(od.total_price - (od.in_menge*od.unit_price)) AS no_price
	
			FROM purchase_order_detail AS od
			LEFT JOIN purchase_order_master om
			ON od.purchase_order_num= om.purchase_order_num
	
			WHERE 1 = 1
			AND od.del_yn = 'N'
	
			<if test="account_code != null and '' != account_code">
				AND om.account_code = #{account_code}
	   		</if>
	
			GROUP BY om.purchase_date,account_code, item_code
		) AS pp
		WHERE 1 = 1

		AND year <![CDATA[ < ]]>  #{year}
		
		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>
		
		)
		ELSE 0
		
		END AS prev_no_price,
		
		
		(
			select sum(goal) From kpi_account_goal_info_tbl
			where year = g.YEAR 
			and month = g.MONTH
	
		) goal

		FROM month_tbl AS g
		LEFT JOIN

		(
		SELECT
		om.account_code, om.account_nm,
		od.purchase_order_num, od.purchase_num,
		CONCAT(YEAR(om.purchase_date)) AS YEAR,
		CONCAT(MONTH(om.purchase_date)) AS MONTH,
		om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status,
		od.item_code, od.item_nm, od.item_spec, od.item_type_code,
		od.item_type_nm,
		
		(
			SELECT
				SUM(in_menge * unit_price) AS in_price
			FROM purchase_order_detail as po
			WHERE del_yn = 'N'
			AND purchase_status IS NOT NULL	
			
			<if test="account_code != null and '' != account_code">
				AND (SELECT account_code FROM purchase_order_master WHERE purchase_order_num = po.purchase_order_num LIMIT 1) = #{account_code}
			</if>
			<if test="item_type_code != null and '' != item_type_code">
				AND item_type_code = #{item_type_code}
			</if>
			AND CONCAT(YEAR(purchase_end_date)) = 	CONCAT(YEAR(om.purchase_date))
			AND CONCAT(MONTH(purchase_end_date)) = CONCAT(MONTH(om.purchase_date))
			
			GROUP BY YEAR(purchase_end_date), MONTH(purchase_end_date)
		
		
		) AS in_price,
		SUM(od.total_price - (od.in_menge*od.unit_price)) AS no_price,
		SUM(od.total_price) AS total_price,

		od.creator, od.updater, od.date_created, od.date_updated
		FROM purchase_order_detail AS od
		LEFT JOIN purchase_order_master om
		ON od.purchase_order_num= om.purchase_order_num

		WHERE 1 = 1
		AND od.del_yn = 'N'

		<if test="account_code != null and '' != account_code">
			AND om.account_code = #{account_code}
		</if>

		GROUP BY om.purchase_date,account_code, item_code
		) AS pp
		ON g.year = pp.year
		AND pp.month = g.month

		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND g.year = #{year}
		</if>		
		
		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>
		
		
		GROUP BY YEAR, g.month

		ORDER BY g.month*1 asc


	</select>
	
	<select id="purchaseGrid_in" parameterType="SYKPI_PurchaseVo"
		resultType="SYKPI_PurchaseVo">


		SELECT

		account_code, account_nm,g.YEAR as year, g.MONTH as month,
		item_code, item_nm, item_type_code, item_type_nm,

		IFNULL(SUM(total_price),0) AS total_price, IFNULL(		(
			SELECT
				SUM(in_menge * unit_price) AS in_price
			FROM purchase_order_detail AS po
			WHERE del_yn = 'N'
			AND purchase_status IS NOT NULL	
			<if test="account_code != null and '' != account_code">
			AND (SELECT account_code FROM purchase_order_master WHERE purchase_order_num = po.purchase_order_num LIMIT 1) = #{account_code}
			</if>
			AND CONCAT(YEAR(purchase_end_date)) =  g.year
			AND CONCAT(MONTH(purchase_end_date)) = g.month

			
			GROUP BY YEAR(purchase_end_date), MONTH(purchase_end_date)
		
		
		),0) as in_price, IFNULL(SUM(no_price),0) AS no_price,		
		
		
			CASE
		WHEN (g.month = '1')
		THEN 
		(SELECT

	   IFNULL(SUM(no_price),0) AS no_price		
	

		FROM 

		(
			SELECT
			om.account_code, om.account_nm,
			CONCAT(YEAR(om.purchase_date)) AS YEAR,
			od.item_type_code,
			SUM(od.total_price - (od.in_menge*od.unit_price)) AS no_price
	
			FROM purchase_order_detail AS od
			LEFT JOIN purchase_order_master om
			ON od.purchase_order_num= om.purchase_order_num
	
			WHERE 1 = 1
			AND od.del_yn = 'N'
	
			<if test="account_code != null and '' != account_code">
				AND om.account_code = #{account_code}
	   		</if>
	
			GROUP BY om.purchase_date,account_code, item_code
		) AS pp
		WHERE 1 = 1

		AND year <![CDATA[ < ]]>  #{year}
		
		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>
		
		)
		ELSE 0
		
		END AS prev_no_price,
		
		
		(
			select sum(goal) From kpi_account_goal_info_tbl
			where year = g.YEAR 
			and month = g.MONTH
	
		) goal

		FROM month_tbl AS g
		LEFT JOIN

		(
		SELECT
		om.account_code, om.account_nm,
		od.purchase_order_num, od.purchase_num,
		CONCAT(YEAR(om.purchase_date)) AS YEAR,
		CONCAT(MONTH(om.purchase_date)) AS MONTH,
		om.purchase_date, od.purchase_req_date, od.purchase_end_date, od.purchase_status,
		od.item_code, od.item_nm, od.item_spec, od.item_type_code,
		od.item_type_nm,
		
		(
			SELECT
				SUM(in_menge * unit_price) AS in_price
			FROM purchase_order_detail as po
			WHERE del_yn = 'N'
			AND purchase_status IS NOT NULL	
			
			<if test="account_code != null and '' != account_code">
				AND (SELECT account_code FROM purchase_order_master WHERE purchase_order_num = po.purchase_order_num LIMIT 1) = #{account_code}
			</if>
			<if test="item_type_code != null and '' != item_type_code">
				AND item_type_code = #{item_type_code}
			</if>
			AND CONCAT(YEAR(purchase_end_date)) = 	CONCAT(YEAR(om.purchase_date))
			AND CONCAT(MONTH(purchase_end_date)) = CONCAT(MONTH(om.purchase_date))
			
			GROUP BY YEAR(purchase_end_date), MONTH(purchase_end_date)
		
		
		) AS in_price,
		SUM(od.total_price - (od.in_menge*od.unit_price)) AS no_price,
		SUM(od.total_price) AS total_price,

		od.creator, od.updater, od.date_created, od.date_updated
		FROM purchase_order_detail AS od
		LEFT JOIN purchase_order_master om
		ON od.purchase_order_num= om.purchase_order_num

		WHERE 1 = 1
		AND od.del_yn = 'N'

		<if test="account_code != null and '' != account_code">
			AND om.account_code = #{account_code}
		</if>

		GROUP BY om.purchase_date,account_code, item_code
		) AS pp
		ON g.year = pp.year
		AND pp.month = g.month

		WHERE 1 = 1

		<if test="year != null and '' != year">
			AND g.year = #{year}
		</if>		
		
		<if test="item_type_code != null and '' != item_type_code">
			AND item_type_code = #{item_type_code}
		</if>
		
		
		GROUP BY YEAR, g.month

		ORDER BY g.month*1 asc


	</select>

</mapper>